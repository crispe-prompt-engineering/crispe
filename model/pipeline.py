import json
import gpt_interaction
import time

def read_json_file(filename):
    """
    Reads JSON data from a file and returns it.

    Parameters:
    filename (str): The path to the JSON file to be read.

    Returns:
    dict: The JSON data parsed as a Python dictionary.
    """
    with open(filename, 'r') as file:
        data = json.load(file)
    return data

def read_instructions(filename):
    """
    Reads the content from a text file and returns it.

    Parameters:
    filename (str): The path to the text file to be read.

    Returns:
    str: The content of the text file.
    """
    with open(filename, 'r') as file:
        content = file.read()
    return content

def write_prompt_file(instructions, data, submission_id, test_case, output_filename):
    """
    Writes the combined content of instructions and JSON data to a file.

    Parameters:
    instructions (str): The content to be written from the instructions file.
    data (list): The JSON data containing the problem and submission details.
    submission_id (str): The ID of the submission to extract specific information.
    output_filename (str): The path to the output file where combined content is written.
    """
    with open(output_filename, 'w') as file:
        # Write the instructions content
        file.write(instructions)
        
        # Iterate through the JSON data to append the required information
        for entry in data:
            if entry["submission_id"] == submission_id:
                # Append the serialized code tokens
                file.write("\n\nGIVEN PYTHON PROGRAM - \n")
                file.write(entry["serialized_code_tokens"])
                
                # Append the first test case
                # first_test_case = entry["test_cases"][0]["input"]
                file.write("\n\nGIVEN TEST CASE - \n")
                if isinstance(test_case, dict):
                    file.write(json.dumps(test_case))  # Convert test_case dictionary to JSON string
                elif isinstance(test_case, str):
                    file.write(test_case)  # Write the test_case string directly
                
                # Append the possible paths
                file.write("\n\nGIVEN POSSIBLE SETS OF CODE COVERAGE - \n")
                for option in entry["coverage_options"]:
                    file.write(option)


    print(f"{output_filename} has been updated successfully.")

def save_results_to_json(submission_id, test_case_input_id, serialized_code_tokens, test_case_input, ccp_response, json_reponses_file, response_time):
    """
    Saves the response stored in ccp_response along with other relevant information to a JSON file.

    Parameters:
    submission_id (str) : Unique Submission ID corresponsing to the target program
    serialized_code_tokens (str): Serialized code tokens.
    test_case_input_id (int) : Test case Input ID for that code snippet
    test_case_input (str): Input of the test case.
    ccp_response (str): Response generated by CCP.
    output_filename (str): Name of the output JSON file.
    """
    data = {
        "submission_id": submission_id, 
        "serialized_code_tokens": serialized_code_tokens,
        "test_case_input_id": test_case_input_id,
        "test_case_input": test_case_input,
        "ccp_response": ccp_response, 
        "time": response_time
    }
    with open(json_reponses_file, 'a') as file:  # Append mode to add results for each input
        json.dump(data, file, indent=4)
        file.write('\n')  # Add a newline for better readability
    print(f"Results for test case '{test_case_input}' saved to {json_reponses_file}.")

def main():
    """
    Main function to orchestrate the reading of JSON and instructions files and
    then writes the combined content to the output responses json file file.
    """
    # File names
    json_filename = f"../data/dataset.json"
    instructions_filename = f"../prompts/cvg_prompt_instructions.txt"
    output_filename = f"../prompts/cvg_prompt.txt"
    json_reponses_file = f"../results/crispe_result_final.json"
    submission_ids = ['s073295946', 's829581754', 's423008678', 's295397439', 's810032733', 's989442798', 's944624250', 's347306711', 's480172327', 's223335163', 's598646700', 's804315495', 's662014478', 's965547343', 's673827909', 's704904086', 's647030783', 's816214968', 's620182355', 's547095050', 's022362719', 's347969747', 's755824162', 's727764716', 's997982847', 's191337530', 's092155259', 's108820173', 's321542736', 's355366470', 's912008095', 's823097721', 's764249614', 's952040787', 's101420183', 's768806410', 's510877789', 's176619108', 's423919208', 's127244428', 's870751779', 's927414085', 's135932146', 's968713428', 's165834271', 's480075061', 's208168923', 's030028216', 's720201434', 's334058082']
    # Read data from JSON file
    json_data = read_json_file(json_filename)

    instructions_content = read_instructions(instructions_filename)

    for submission_id in submission_ids:
        for entry in json_data:
            if entry["submission_id"] == submission_id:
                serialized_code_tokens = entry["serialized_code_tokens"]
                test_case_input_id = 0
                for test_case_id, test_case_input in entry["test_cases"].items():
                    test_case_input_id += 1
                    # Write the prompt file with updated test case input
                    write_prompt_file(instructions_content, json_data, submission_id, test_case_input, output_filename)

                    # Interact with GPT for the updated prompt file
                    start_time = time.time()
                    ccp_response_text = gpt_interaction.ccp_chatgpt_interaction(output_filename)
                    end_time = time.time()
                    response_time = end_time - start_time

                    # Debug print statements
                    print(test_case_input)
                    print("----------------------------------------------------------------------------------------------------------------------------------")
                    print(ccp_response_text)

                    # Save results to JSON
                    save_results_to_json(submission_id, test_case_input_id, serialized_code_tokens, test_case_input, ccp_response_text, json_reponses_file, response_time)

if __name__ == "__main__":
    main()
