[{
        "source": "source",
        "lang": "python",
        "problem_id": "p00016",
        "code_tokens": "from math import sin, cos, radians\ncl = [0, 0]\ncd = 0\nwhile True:\n    o = tuple(map(int, input().split(',')))\n    if o == (0, 0):\n        break\n    cl[0] += o[0] * sin(radians(cd))\n    cl[1] += o[0] * cos(radians(cd))\n    cd += o[1]\n    if 180 <= cd:\n        cd -= 360\n    elif cd <= -180:\n        cd += 360\nfor x in cl:\n    print(int(x))",
        "submission_id": "s073295946",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 20,
        "if_count": 2,
        "elif_count": 1,
        "else_count": 0,
        "for_count": 1,
        "while_count": 1,
        "total_control_statements": 5,
        "serialized_code_tokens": "Line 1: from math import sin, cos, radians\nLine 2: cl = [0, 0]\nLine 3: cd = 0\nLine 4: while True:\nLine 5:     o = tuple(map(int, input().split(',')))\nLine 6:     if o == (0, 0):\nLine 7:         break\nLine 8:     cl[0] += o[0] * sin(radians(cd))\nLine 9:     cl[1] += o[0] * cos(radians(cd))\nLine 10:     cd += o[1]\nLine 11:     if 180 <= cd:\nLine 12:         cd -= 360\nLine 13:     elif cd <= -180:\nLine 14:         cd += 360\nLine 15: for x in cl:\nLine 16:     print(int(x))",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 15, 16\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 15\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 15, 16\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 15\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15\n",
            "7. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 15, 16\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 15\n",
            "9. Lines 1, 2, 3, 4, 15, 16\n",
            "10. Lines 1, 2, 3, 4, 15\n"
        ],
        "number_coverage_options": 10,
        "test_cases": {
            "1": "56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0",
            "2": "10,90\n10,-90\n10,180\n0,0",
            "3": "5,45\n10,45\n15,-90\n0,0",
            "4": "20,30\n30,-45\n40,60\n0,0"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p01840",
        "code_tokens": "a = list(map(int,input().split()))\nb = list(map(int,input().split()))\nk = [0]*a[2]\npp = 0\nsu = 0\nfor i in b:\n    for j in range(a[2]):\n        if j >= i - a[1]   and j <= i + a[1] - 1:\n                k[j] += 1\nfor i in range(a[2]):\n    if k[i] == 0:\n        su += 1\nprint(su)",
        "submission_id": "s829581754",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 21,
        "if_count": 2,
        "elif_count": 0,
        "else_count": 0,
        "for_count": 3,
        "while_count": 0,
        "total_control_statements": 5,
        "serialized_code_tokens": "Line 1: a = list(map(int,input().split()))\nLine 2: b = list(map(int,input().split()))\nLine 3: k = [0]*a[2]\nLine 4: pp = 0\nLine 5: su = 0\nLine 6: for i in b:\nLine 7:     for j in range(a[2]):\nLine 8:         if j >= i - a[1]   and j <= i + a[1] - 1:\nLine 9:                 k[j] += 1\nLine 10: for i in range(a[2]):\nLine 11:     if k[i] == 0:\nLine 12:         su += 1\nLine 13: print(su)",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 7, 8, 10, 13\n",
            "7. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 13\n",
            "9. Lines 1, 2, 3, 4, 5, 6, 7, 10, 13\n",
            "10. Lines 1, 2, 3, 4, 5, 6, 10, 11, 12, 13\n",
            "11. Lines 1, 2, 3, 4, 5, 6, 10, 11, 13\n",
            "12. Lines 1, 2, 3, 4, 5, 6, 10, 13\n"
        ],
        "number_coverage_options": 12,
        "test_cases": {
            "1": "5 2 10\n1 3 5",
            "2": "5 2 10\n2 4 6 8",
            "3": "5 1 10\n1 2 3\n",
            "4": "5 2 10\n"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "4": [
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p01905",
        "code_tokens": "a = input().split(' ')\ntour = int(a[0])-1\nno_vs = 0\nif int(a[1]) != 0:\n    absent = []\n    for _ in range(int(a[1])):\n        absent.append(int(input()))\n    num = int(int(a[0])/2)\n    while absent != []:\n        next_absent = []\n        for n in range(num):\n            if 2*n in absent or 2*n+1 in absent:\n                no_vs+=1\n                if 2*n in absent and 2*n+1 in absent:\n                    next_absent.append(n)\n        absent = next_absent\n        num = int(num/2)\nprint(tour-no_vs)",
        "submission_id": "s423008678",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 20,
        "if_count": 3,
        "elif_count": 0,
        "else_count": 0,
        "for_count": 2,
        "while_count": 1,
        "total_control_statements": 6,
        "serialized_code_tokens": "Line 1: a = input().split(' ')\nLine 2: tour = int(a[0])-1\nLine 3: no_vs = 0\nLine 4: if int(a[1]) != 0:\nLine 5:     absent = []\nLine 6:     for _ in range(int(a[1])):\nLine 7:         absent.append(int(input()))\nLine 8:     num = int(int(a[0])/2)\nLine 9:     while absent != []:\nLine 10:         next_absent = []\nLine 11:         for n in range(num):\nLine 12:             if 2*n in absent or 2*n+1 in absent:\nLine 13:                 no_vs+=1\nLine 14:                 if 2*n in absent and 2*n+1 in absent:\nLine 15:                     next_absent.append(n)\nLine 16:         absent = next_absent\nLine 17:         num = int(num/2)\nLine 18: print(tour-no_vs)",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 17, 18\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 18\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18\n",
            "7. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 16, 17, 18\n",
            "9. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 16, 17, 18\n",
            "10. Lines 1, 2, 3, 4, 5, 6, 8, 9, 18\n",
            "11. Lines 1, 2, 3, 4, 18\n"
        ],
        "number_coverage_options": 11,
        "test_cases": {
            "1": "8 2\n2\n3",
            "2": "8 0\n\n",
            "3": "16 4\n1\n3\n5\n7\n",
            "4": "4 1\n1"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p02113",
        "code_tokens": "from functools import cmp_to_key\nn, l = map(int, input().split())\nss = {}\nfor i in range(n):\n    s = input()\n    ss[s] = ss.get(s, 0) + 1\nans = \"\"\nma = \"\"\nfor s in sorted(ss):\n    if s[::-1] == s:\n        ans += s * (ss[s]//2)\n        ss[s] -= 2*(ss[s]//2)\n        if ss[s] > 0 and len(ma) < len(s):\n            ma = s\n    else:\n        rev = s[::-1]\n        if rev in ss:\n            cnt = min(ss[s], ss[rev])\n            ans += s * cnt\n            ss[s] -= cnt\n            ss[rev] -= cnt\nprint(ans + ma + ans[::-1])",
        "submission_id": "s295397439",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 22,
        "if_count": 3,
        "elif_count": 0,
        "else_count": 1,
        "for_count": 2,
        "while_count": 0,
        "total_control_statements": 6,
        "serialized_code_tokens": "Line 1: from functools import cmp_to_key\nLine 2: n, l = map(int, input().split())\nLine 3: ss = {}\nLine 4: for i in range(n):\nLine 5:     s = input()\nLine 6:     ss[s] = ss.get(s, 0) + 1\nLine 7: ans = \"\"\nLine 8: ma = \"\"\nLine 9: for s in sorted(ss):\nLine 10:     if s[::-1] == s:\nLine 11:         ans += s * (ss[s]//2)\nLine 12:         ss[s] -= 2*(ss[s]//2)\nLine 13:         if ss[s] > 0 and len(ma) < len(s):\nLine 14:             ma = s\nLine 15:     else:\nLine 16:         rev = s[::-1]\nLine 17:         if rev in ss:\nLine 18:             cnt = min(ss[s], ss[rev])\nLine 19:             ans += s * cnt\nLine 20:             ss[s] -= cnt\nLine 21:             ss[rev] -= cnt\nLine 22: print(ans + ma + ans[::-1])",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 22\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 22\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 17, 18, 19, 20, 21, 22\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 17, 22\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 22\n",
            "6. Lines 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 22\n",
            "7. Lines 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 22\n",
            "8. Lines 1, 2, 3, 4, 7, 8, 9, 10, 16, 17, 18, 19, 20, 21, 22\n",
            "9. Lines 1, 2, 3, 4, 7, 8, 9, 10, 16, 17, 22\n",
            "10. Lines 1, 2, 3, 4, 7, 8, 9, 22\n"
        ],
        "number_coverage_options": 10,
        "test_cases": {
            "1": "4 2\nab\nba\nab\nba",
            "2": "5 2\nab\nba\naa\naa\ncc",
            "3": "3 3\nabc\ncba\naaa",
            "4": "6 2 \nab\nba\ncd\ndc\nef\nfe",
            "5": "1 3\naaa\n"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ],
            "5": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p00537",
        "code_tokens": "n,m=map(int,input().split())\np = list(map(int,input().split()))\nabc = [list(map(int, input().split())) for _ in range(n-1)]\ncnt=[0]*n\nfor i in range(m-1):\n    p[i]-=1\n    p[i+1]-=1\n    if p[i]<p[i+1]:\n        cnt[p[i]]+=1\n        cnt[p[i+1]]-=1\n    else:\n        cnt[p[i]]-=1\n        cnt[p[i+1]]+=1\n    p[i]+=1\n    p[i+1]+=1\nfor i in range(n-1):\n    cnt[i+1]+=cnt[i]\nans=0\nfor i in range(n-1):\n    ans+=min(abc[i][0]*cnt[i],abc[i][1]*cnt[i]+abc[i][2])\nprint(ans)",
        "submission_id": "s810032733",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 25,
        "if_count": 1,
        "elif_count": 0,
        "else_count": 1,
        "for_count": 4,
        "while_count": 0,
        "total_control_statements": 6,
        "serialized_code_tokens": "Line 1: n,m=map(int,input().split())\nLine 2: p = list(map(int,input().split()))\nLine 3: abc = [list(map(int, input().split())) for _ in range(n-1)]\nLine 4: cnt=[0]*n\nLine 5: for i in range(m-1):\nLine 6:     p[i]-=1\nLine 7:     p[i+1]-=1\nLine 8:     if p[i]<p[i+1]:\nLine 9:         cnt[p[i]]+=1\nLine 10:         cnt[p[i+1]]-=1\nLine 11:     else:\nLine 12:         cnt[p[i]]-=1\nLine 13:         cnt[p[i+1]]+=1\nLine 14:     p[i]+=1\nLine 15:     p[i+1]+=1\nLine 16: for i in range(n-1):\nLine 17:     cnt[i+1]+=cnt[i]\nLine 18: ans=0\nLine 19: for i in range(n-1):\nLine 20:     ans+=min(abc[i][0]*cnt[i],abc[i][1]*cnt[i]+abc[i][2])\nLine 21: print(ans)",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18, 19, 21\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 18, 19, 20, 21\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 18, 19, 21\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21\n",
            "7. Lines 1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 16, 18, 19, 20, 21\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 16, 18, 19, 21\n",
            "9. Lines 1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21\n",
            "10. Lines 1, 2, 3, 4, 5, 16, 17, 18, 19, 21\n",
            "11. Lines 1, 2, 3, 4, 5, 16, 18, 19, 20, 21\n",
            "12. Lines 1, 2, 3, 4, 5, 16, 18, 19, 21\n"
        ],
        "number_coverage_options": 12,
        "test_cases": {
            "1": "3 3\n1 2 3\n1 2 3\n2 2 2",
            "2": "4 4\n1 2 3 4\n1 2 2\n1 2 1\n3 1 4",
            "3": "2 2\n1 2\n1 1 1",
            "4": "5 5\n1 3 2 4 5\n2 3 4\n1 4 2\n3 2 5\n1 2 3"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p00761",
        "code_tokens": "def sort_MxMn(SeriesA):\n    global max_a, min_a\n    listA = list(str(SeriesA))\n    while len(listA) < b:\n        listA.append(\"0\")\n    listA = [int(x) for x in listA]\n    max_a = sorted(listA, reverse=True)\n    min_a = sorted(listA)\ndef translate(listEx):\n    num = 0\n    for i in range(b):\n        num += listEx[i]*(10 ** (b-i-1))\n    return num\nfor k in range(100000):\n    a, b = map(int, input().split())\n    if a + b ==0:\n        break\n    c = []\n    for i in range(1):\n        c.append(a)\n        sort_MxMn(a)\n        a = translate(max_a) - translate(min_a)\n        if (a in c) == True:\n            print(\"{} {} {}\".format(c.index(a), a, i - c.index(a) + 1))\n            break",
        "submission_id": "s989442798",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 27,
        "if_count": 2,
        "elif_count": 0,
        "else_count": 0,
        "for_count": 4,
        "while_count": 1,
        "total_control_statements": 7,
        "serialized_code_tokens": "Line 1: def sort_MxMn(SeriesA):\nLine 2:     global max_a, min_a\nLine 3:     listA = list(str(SeriesA))\nLine 4:     while len(listA) < b:\nLine 5:         listA.append(\"0\")\nLine 6:     listA = [int(x) for x in listA]\nLine 7:     max_a = sorted(listA, reverse=True)\nLine 8:     min_a = sorted(listA)\nLine 9: def translate(listEx):\nLine 10:     num = 0\nLine 11:     for i in range(b):\nLine 12:         num += listEx[i]*(10 ** (b-i-1))\nLine 13:     return num\nLine 14: for k in range(100000):\nLine 15:     a, b = map(int, input().split())\nLine 16:     if a + b ==0:\nLine 17:         break\nLine 18:     c = []\nLine 19:     for i in range(1):\nLine 20:         c.append(a)\nLine 21:         sort_MxMn(a)\nLine 22:         a = translate(max_a) - translate(min_a)\nLine 23:         if (a in c) == True:\nLine 24:             print(\"{} {} {}\".format(c.index(a), a, i - c.index(a) + 1))\nLine 25:             break",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 22\n",
            "2. Lines 1, 9, 10, 11, 13, 14, 15, 16, 18, 19, 22\n",
            "3. Lines 1, 9, 10, 11, 13, 14, 15, 16, 18, 19, 22, 23\n",
            "4. Lines 1, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22\n",
            "5. Lines 1, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22\n",
            "6. Lines 1, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23\n",
            "7. Lines 1, 9, 10, 11, 12, 13, 14, 15, 16, 22\n",
            "8. Lines 1, 9, 10, 11, 13, 14, 15, 16, 22\n",
            "9. Lines 1, 9, 10, 11, 13, 14, 15, 16, 22, 23\n",
            "10. Lines 1, 9, 10, 11, 12, 13, 14, 22\n",
            "11. Lines 1, 9, 10, 11, 13, 14, 22\n",
            "12. Lines 1, 9, 10, 11, 13, 14, 22, 23\n"
        ],
        "number_coverage_options": 12,
        "test_cases": {
            "1": "123 3",
            "2": "100 3",
            "3": "101 3",
            "4": "999 3",
            "5": "1234567890 10"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ],
            "2": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ],
            "3": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ],
            "4": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ],
            "5": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p02842",
        "code_tokens": "import math\nn = int(input())\nmax = 50000\nherf = 25000\narr = []\nresult = ':('\nfor t in range(50000):\n  arr.append(t)\nif herf > n:\n  for s in range(herf):\n    ans = math.floor(s * 1.08)\n    if ans == n:\n      result = str(s)\n      break;\nelse:\n  for s in range(25000, max):\n    ans = math.floor(s * 1.08)\n    if ans == n:\n      result = str(s)\n      break;\nprint(result)",
        "submission_id": "s944624250",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 27,
        "if_count": 3,
        "elif_count": 0,
        "else_count": 1,
        "for_count": 3,
        "while_count": 0,
        "total_control_statements": 7,
        "serialized_code_tokens": "Line 1: import math\nLine 2: n = int(input())\nLine 3: max = 50000\nLine 4: herf = 25000\nLine 5: arr = []\nLine 6: result = ':('\nLine 7: for t in range(50000):\nLine 8:   arr.append(t)\nLine 9: if herf > n:\nLine 10:   for s in range(herf):\nLine 11:     ans = math.floor(s * 1.08)\nLine 12:     if ans == n:\nLine 13:       result = str(s)\nLine 14:       break;\nLine 15: else:\nLine 16:   for s in range(25000, max):\nLine 17:     ans = math.floor(s * 1.08)\nLine 18:     if ans == n:\nLine 19:       result = str(s)\nLine 20:       break;\nLine 21: print(result)",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 21\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 21\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 21\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 17, 18, 19, 21\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 17, 18, 21\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 21\n",
            "7. Lines 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 21\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 21\n",
            "9. Lines 1, 2, 3, 4, 5, 6, 7, 9, 10, 21\n",
            "10. Lines 1, 2, 3, 4, 5, 6, 7, 9, 16, 17, 18, 19, 21\n",
            "11. Lines 1, 2, 3, 4, 5, 6, 7, 9, 16, 17, 18, 21\n",
            "12. Lines 1, 2, 3, 4, 5, 6, 7, 9, 16, 21\n"
        ],
        "number_coverage_options": 12,
        "test_cases": {
            "1": "10000",
            "2": "30000",
            "3": "45000",
            "4": "100000",
            "5": "1"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                1
            ],
            "5": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03470",
        "code_tokens": "N = int(input())\nd = [int(input()) for j in range(N)]\nd.sort(reverse=True)\ncurrent_mochi = 0\nnext_mochi = 0\ncounter = 0\nfor i,num in enumerate(d):\n    next_mochi = num\n    if i == 0:\n        counter+=1\n        current_mochi = num\n    elif i + 1 == len(d):\n        if current_mochi > next_mochi:\n            counter+=1\n            break\n        else:\n            break\n    elif current_mochi > next_mochi:\n        counter+=1\n        current_mochi = num\nprint(counter)",
        "submission_id": "s347306711",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 27,
        "if_count": 2,
        "elif_count": 2,
        "else_count": 1,
        "for_count": 2,
        "while_count": 0,
        "total_control_statements": 7,
        "serialized_code_tokens": "Line 1: N = int(input())\nLine 2: d = [int(input()) for j in range(N)]\nLine 3: d.sort(reverse=True)\nLine 4: current_mochi = 0\nLine 5: next_mochi = 0\nLine 6: counter = 0\nLine 7: for i,num in enumerate(d):\nLine 8:     next_mochi = num\nLine 9:     if i == 0:\nLine 10:         counter+=1\nLine 11:         current_mochi = num\nLine 12:     elif i + 1 == len(d):\nLine 13:         if current_mochi > next_mochi:\nLine 14:             counter+=1\nLine 15:             break\nLine 16:         else:\nLine 17:             break\nLine 18:     elif current_mochi > next_mochi:\nLine 19:         counter+=1\nLine 20:         current_mochi = num\nLine 21: print(counter)",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 21\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 21\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 21\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 21\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 21\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 18, 19, 20, 21\n",
            "7. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 18, 19, 20, 21\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 18, 19, 20, 21\n",
            "9. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 18, 21\n",
            "10. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 18, 21\n",
            "11. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 18, 21\n",
            "12. Lines 1, 2, 3, 4, 5, 6, 7, 21\n"
        ],
        "number_coverage_options": 12,
        "test_cases": {
            "1": "5\n5\n4\n3\n2\n1",
            "2": "3\n10\n5\n10",
            "3": "1\n100",
            "4": "4\n3\n3\n3\n3",
            "5": "6\n2\n5\n1\n3\n6\n4"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                0,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                0,
                0,
                1
            ],
            "5": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p04047",
        "code_tokens": "N=input()\nL=list(map(int,input().split()))\nitems=0\nwhile(L):\n\tif L[0]<L[1] :\n\t\ts_lg=L[0]\n\t\tlg=L[1]\n\telse:\n\t\ts_lg=L[1]\n\t\tlg=L[0]\n\tif len(L)>2:\n\t\tfor i in range(2,len(L)) :\n\t\t\tif L[i]>=lg:\n\t\t\t\ts_lg=lg\n\t\t\t\tlg=L[i]\n\t\t\telif L[i]>=s_lg :\n\t\t\t\ts_lg=L[i]\n\titems=items+s_lg\n\tL.remove(s_lg)\n\tL.remove(lg)\t\nprint(items)\t",
        "submission_id": "s480172327",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 28,
        "if_count": 3,
        "elif_count": 1,
        "else_count": 1,
        "for_count": 1,
        "while_count": 1,
        "total_control_statements": 7,
        "serialized_code_tokens": "Line 1: N=input()\nLine 2: L=list(map(int,input().split()))\nLine 3: items=0\nLine 4: while(L):\nLine 5: \tif L[0]<L[1] :\nLine 6: \t\ts_lg=L[0]\nLine 7: \t\tlg=L[1]\nLine 8: \telse:\nLine 9: \t\ts_lg=L[1]\nLine 10: \t\tlg=L[0]\nLine 11: \tif len(L)>2:\nLine 12: \t\tfor i in range(2,len(L)) :\nLine 13: \t\t\tif L[i]>=lg:\nLine 14: \t\t\t\ts_lg=lg\nLine 15: \t\t\t\tlg=L[i]\nLine 16: \t\t\telif L[i]>=s_lg :\nLine 17: \t\t\t\ts_lg=L[i]\nLine 18: \titems=items+s_lg\nLine 19: \tL.remove(s_lg)\nLine 20: \tL.remove(lg)\t\nLine 21: print(items)",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 18, 19, 20, 21\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 16, 17, 18, 19, 20, 21\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 16, 18, 19, 20, 21\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 11, 12, 18, 19, 20, 21\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 11, 18, 19, 20, 21\n",
            "6. Lines 1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21\n",
            "7. Lines 1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21\n",
            "8. Lines 1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 16, 18, 19, 20, 21\n",
            "9. Lines 1, 2, 3, 4, 5, 9, 10, 11, 12, 18, 19, 20, 21\n",
            "10. Lines 1, 2, 3, 4, 5, 9, 10, 11, 18, 19, 20, 21\n",
            "11. Lines 1, 2, 3, 4, 21\n"
        ],
        "number_coverage_options": 11,
        "test_cases": {
            "1": "4\n3 3 3 3",
            "2": "5\n100 1 2 3 14 15 58 58 58 29",
            "3": "2\n1 3 1 2",
            "4": "5\n100 1 2 3 14 15 58 58 58 29",
            "5": "4\n5 5 5 5"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "5": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03588",
        "code_tokens": "N = int(input())\nif(N == 1):\n  A1,B1 = map(int,input().split())\n  print(str(A1+B1))\n  exit()\nfor i in range(N-1):\n  if(i == 0):\n    A1,B1 = map(int,input().split())\n    A2,B2 = map(int,input().split())\n    if(A1 <= A2):\n      MA = A2\n      MB = B2\n    else:\n      MA = A1\n      MB = B1\n    A1 = A2\n    B1 = B2\n  else:\n    A2,B2 = map(int,input().split())\n    if(MA <= A2):\n      MA = A2\n      MB = B2\n    A1 = A2\n    B1 = B2\nprint(str(MA + MB))",
        "submission_id": "s223335163",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 25,
        "if_count": 4,
        "elif_count": 0,
        "else_count": 2,
        "for_count": 1,
        "while_count": 0,
        "total_control_statements": 7,
        "serialized_code_tokens": "Line 1: N = int(input())\nLine 2: if(N == 1):\nLine 3:   A1,B1 = map(int,input().split())\nLine 4:   print(str(A1+B1))\nLine 5:   exit()\nLine 6: for i in range(N-1):\nLine 7:   if(i == 0):\nLine 8:     A1,B1 = map(int,input().split())\nLine 9:     A2,B2 = map(int,input().split())\nLine 10:     if(A1 <= A2):\nLine 11:       MA = A2\nLine 12:       MB = B2\nLine 13:     else:\nLine 14:       MA = A1\nLine 15:       MB = B1\nLine 16:     A1 = A2\nLine 17:     B1 = B2\nLine 18:   else:\nLine 19:     A2,B2 = map(int,input().split())\nLine 20:     if(MA <= A2):\nLine 21:       MA = A2\nLine 22:       MB = B2\nLine 23:     A1 = A2\nLine 24:     B1 = B2\nLine 25: print(str(MA + MB))",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 17, 25\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 25\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 19, 20, 21, 22, 23, 24, 25\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 19, 20, 23, 24, 25\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 25\n",
            "6. Lines 1, 2, 6, 7, 8, 9, 10, 11, 12, 16, 17, 25\n",
            "7. Lines 1, 2, 6, 7, 8, 9, 10, 14, 15, 16, 17, 25\n",
            "8. Lines 1, 2, 6, 7, 19, 20, 21, 22, 23, 24, 25\n",
            "9. Lines 1, 2, 6, 7, 19, 20, 23, 24, 25\n",
            "10. Lines 1, 2, 6, 25\n"
        ],
        "number_coverage_options": 10,
        "test_cases": {
            "1": "1\n1 2",
            "2": "3\n1 2\n3 4\n5 6",
            "3": "4\n3 4 \n1 2\n5 6\n7 8",
            "4": "5\n5 5\n2 4\n6 7\n1 8\n9 3\n",
            "5": "2\n1 10\n2 2"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2": [
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "3": [
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "4": [
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "5": [
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p04037",
        "code_tokens": "n = int(input())\na = [int(i) for i in input().split()]\na.sort(reverse=True)\na.append(0)\nans = False\nfor i in range(n):\n    if i+1>=a[i+1]:\n        ans=(((a[i]-i)%2)==0)\n        for j in range(i+1,n+1):\n            if a[j]<=i:\n                ans = ans or (((i-j)%2)==0)\n                break\n        break\nif ans:\n    print(\"First\")\nelse:\n    print(\"Second\")",
        "submission_id": "s598646700",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 22,
        "if_count": 3,
        "elif_count": 0,
        "else_count": 1,
        "for_count": 3,
        "while_count": 0,
        "total_control_statements": 7,
        "serialized_code_tokens": "Line 1: n = int(input())\nLine 2: a = [int(i) for i in input().split()]\nLine 3: a.sort(reverse=True)\nLine 4: a.append(0)\nLine 5: ans = False\nLine 6: for i in range(n):\nLine 7:     if i+1>=a[i+1]:\nLine 8:         ans=(((a[i]-i)%2)==0)\nLine 9:         for j in range(i+1,n+1):\nLine 10:             if a[j]<=i:\nLine 11:                 ans = ans or (((i-j)%2)==0)\nLine 12:                 break\nLine 13:         break\nLine 14: if ans:\nLine 15:     print(\"First\")\nLine 16: else:\nLine 17:     print(\"Second\")",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 17\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 17\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 17\n",
            "7. Lines 1, 2, 3, 4, 5, 6, 7, 14, 15\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 7, 14, 17\n",
            "9. Lines 1, 2, 3, 4, 5, 6, 14, 15\n",
            "10. Lines 1, 2, 3, 4, 5, 6, 14, 17\n"
        ],
        "number_coverage_options": 10,
        "test_cases": {
            "1": "3\n5 3 1",
            "2": "4 \n2 4 6 8",
            "3": "5\n1 2 3 4 5",
            "4": "5\n5 4 3 2 1",
            "5": "2\n1 1"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1
            ],
            "5": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03913",
        "code_tokens": "N, A = map(int, input().split())\nans = N\nif N > 1:\n    for k in range(1, 41):\n        left = 0; right = N+1\n        while left+1 < right:\n            mid = (left + right) // 2\n            if mid**(k+1) < N:\n                left = mid\n            else:\n                right = mid\n        m = right\n        v = (m-1)**(k+1)\n        for i in range(k+1):\n            v //= m-1\n            v *= m\n            if N <= v:\n                ans = min(ans, A*k + (m-1)*(k+1) + (i+1))\n                break\nprint(ans)",
        "submission_id": "s804315495",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 22,
        "if_count": 3,
        "elif_count": 0,
        "else_count": 1,
        "for_count": 2,
        "while_count": 1,
        "total_control_statements": 7,
        "serialized_code_tokens": "Line 1: N, A = map(int, input().split())\nLine 2: ans = N\nLine 3: if N > 1:\nLine 4:     for k in range(1, 41):\nLine 5:         left = 0; right = N+1\nLine 6:         while left+1 < right:\nLine 7:             mid = (left + right) // 2\nLine 8:             if mid**(k+1) < N:\nLine 9:                 left = mid\nLine 10:             else:\nLine 11:                 right = mid\nLine 12:         m = right\nLine 13:         v = (m-1)**(k+1)\nLine 14:         for i in range(k+1):\nLine 15:             v //= m-1\nLine 16:             v *= m\nLine 17:             if N <= v:\nLine 18:                 ans = min(ans, A*k + (m-1)*(k+1) + (i+1))\nLine 19:                 break\nLine 20: print(ans)",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 20\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 20\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 20\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 20\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 20\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 20\n",
            "7. Lines 1, 2, 3, 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 20\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 12, 13, 14, 15, 16, 17, 20\n",
            "9. Lines 1, 2, 3, 4, 5, 6, 12, 13, 14, 20\n",
            "10. Lines 1, 2, 3, 4, 20\n",
            "11. Lines 1, 2, 3, 20\n"
        ],
        "number_coverage_options": 11,
        "test_cases": {
            "1": "5 2",
            "2": "10 3",
            "3": "1 1",
            "4": "100 10",
            "5": "1000000 5"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1
            ],
            "3": [
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1
            ],
            "5": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1
            ]
            
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p00112",
        "code_tokens": "while True:\n\tn = int(input())\n\tif n == 0: break\n\tf = [0]*65\n\tfor i in range(n):\n\t\tf[int(input())] += 1\n\tif n == 1:\n\t\tprint(0)\n\t\tcontinue\n\tn -= f[0]\n\ti, ans, m = 1, 0, n\n\twhile m > 0:\n\t\tk = f[i];\n\t\tif k == 0:\n\t\t\ti += 1\n\t\t\tcontinue\n\t\tif k == 1: ans += (m-1)*i\n\t\telse: \n\t\t\ta = m*k - (k*(k+1))//2\n\t\t\tans += a*i\n\t\tm -= k\n\t\ti += 1\n\tprint(ans)",
        "submission_id": "s662014478",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 26,
        "if_count": 4,
        "elif_count": 0,
        "else_count": 1,
        "for_count": 1,
        "while_count": 2,
        "total_control_statements": 8,
        "serialized_code_tokens": "Line 1: while True:\nLine 2: \tn = int(input())\nLine 3: \tif n == 0: break\nLine 4: \tf = [0]*65\nLine 5: \tfor i in range(n):\nLine 6: \t\tf[int(input())] += 1\nLine 7: \tif n == 1:\nLine 8: \t\tprint(0)\nLine 9: \t\tcontinue\nLine 10: \tn -= f[0]\nLine 11: \ti, ans, m = 1, 0, n\nLine 12: \twhile m > 0:\nLine 13: \t\tk = f[i];\nLine 14: \t\tif k == 0:\nLine 15: \t\t\ti += 1\nLine 16: \t\t\tcontinue\nLine 17: \t\tif k == 1: ans += (m-1)*i\nLine 18: \t\telse: \nLine 19: \t\t\ta = m*k - (k*(k+1))//2\nLine 20: \t\t\tans += a*i\nLine 21: \t\tm -= k\nLine 22: \t\ti += 1\nLine 23: \tprint(ans)",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 23\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 17, 21, 22, 23\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 23\n",
            "6. Lines 1, 2, 3, 4, 5, 7, 8\n",
            "7. Lines 1, 2, 3, 4, 5, 7, 10, 11, 12, 13, 14, 15, 23\n",
            "8. Lines 1, 2, 3, 4, 5, 7, 10, 11, 12, 13, 14, 17, 21, 22, 23\n",
            "9. Lines 1, 2, 3, 4, 5, 7, 10, 11, 12, 23\n",
            "10. Lines 1\n"
        ],
        "number_coverage_options": 10,
        "test_cases": {
            "1": "1\n2\n3\n4\n5\n",
            "2": "3\n3\n3\n3\n3",
            "3": "0",
            "4": "1\n2\n2\n4\n5\n5"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "3": [
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p02791",
        "code_tokens": "n = input()\nN = int(n)\nP = []\ncounter = 0\ninput_string = input()\nP = input_string.split()\nfor i in range(int(N)):\n    for j in range(N):\n        if N == int(P[i]):\n            counter = counter + 1\n            if N != 1:\n                N = N - 1\n                break\n            else: \n                break\n        elif N < int(P[i]):\n            break\n        else:\n            if N != 1:\n                N = N - 1   \nprint(counter)",
        "submission_id": "s965547343",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 23,
        "if_count": 3,
        "elif_count": 1,
        "else_count": 2,
        "for_count": 2,
        "while_count": 0,
        "total_control_statements": 8,
        "serialized_code_tokens": "Line 1: n = input()\nLine 2: N = int(n)\nLine 3: P = []\nLine 4: counter = 0\nLine 5: input_string = input()\nLine 6: P = input_string.split()\nLine 7: for i in range(int(N)):\nLine 8:     for j in range(N):\nLine 9:         if N == int(P[i]):\nLine 10:             counter = counter + 1\nLine 11:             if N != 1:\nLine 12:                 N = N - 1\nLine 13:                 break\nLine 14:             else: \nLine 15:                 break\nLine 16:         elif N < int(P[i]):\nLine 17:             break\nLine 18:         else:\nLine 19:             if N != 1:\nLine 20:                 N = N - 1   \nLine 21: print(counter)",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 21\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 21\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 21\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 19, 20, 21\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 19, 20, 21\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 19, 20, 21\n",
            "7. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 19, 21\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 19, 21\n",
            "9. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 19, 21\n",
            "10. Lines 1, 2, 3, 4, 5, 6, 7, 8, 21\n",
            "11. Lines 1, 2, 3, 4, 5, 6, 7, 21\n"
        ],
        "number_coverage_options": 11,
        "test_cases": {
            "1": "5\n1 2 3 4 5",
            "2": "4\n4 3 2 1",
            "3": "3\n1 3 2",
            "4": "6\n1 1 2 3 4 5"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p02963",
        "code_tokens": "s = int(input())\nm = int(s**0.5)\nl = s - m*m\nif l<0:\n    m = m-1\n    l = s - m*m\nif l < 1000000000 and m < 1000000000:\n    print(0,1,m,0,l,m+1)\nelif m == 1000000000:\n    print(0,0,m,0,0,m)\nelse:\n    l = (m+1)*(m+1)-s\n    if l < 1000000000:\n        print(0,0,m+1,1,l,m+1)\n    else:\n        for i in range(2,int(l**0.5) +1):\n            if l%i == 0:\n                t =i\n                break\n        print(0,0,m+1,t,l//t,m+1)",
        "submission_id": "s673827909",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 25,
        "if_count": 4,
        "elif_count": 1,
        "else_count": 2,
        "for_count": 1,
        "while_count": 0,
        "total_control_statements": 8,
        "serialized_code_tokens": "Line 1: s = int(input())\nLine 2: m = int(s**0.5)\nLine 3: l = s - m*m\nLine 4: if l<0:\nLine 5:     m = m-1\nLine 6:     l = s - m*m\nLine 7: if l < 1000000000 and m < 1000000000:\nLine 8:     print(0,1,m,0,l,m+1)\nLine 9: elif m == 1000000000:\nLine 10:     print(0,0,m,0,0,m)\nLine 11: else:\nLine 12:     l = (m+1)*(m+1)-s\nLine 13:     if l < 1000000000:\nLine 14:         print(0,0,m+1,1,l,m+1)\nLine 15:     else:\nLine 16:         for i in range(2,int(l**0.5) +1):\nLine 17:             if l%i == 0:\nLine 18:                 t =i\nLine 19:                 break\nLine 20:         print(0,0,m+1,t,l//t,m+1)",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 9, 10\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 9, 12, 13, 14\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 9, 12, 13, 16, 17, 18, 20\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 9, 12, 13, 16, 17, 20\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 7, 9, 12, 13, 16, 20\n",
            "7. Lines 1, 2, 3, 4, 7, 8\n",
            "8. Lines 1, 2, 3, 4, 7, 9, 10\n",
            "9. Lines 1, 2, 3, 4, 7, 9, 12, 13, 14\n",
            "10. Lines 1, 2, 3, 4, 7, 9, 12, 13, 16, 17, 18, 20\n",
            "11. Lines 1, 2, 3, 4, 7, 9, 12, 13, 16, 17, 20\n",
            "12. Lines 1, 2, 3, 4, 7, 9, 12, 13, 16, 20\n"
        ],
        "number_coverage_options": 12,
        "test_cases": {
            "1": "9",
            "2": "16",
            "3": "1000000000000",
            "4": "1000000000001",
            "5": "25"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2": [
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "3": [
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "4": [
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "5": [
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03938",
        "code_tokens": "N = int(input())\nP = list(map(int,input().split()))\nA = [1 for _ in range(N+1)]\nB = [0 for _ in range(N+1)]\nL = [0 for _ in range(N+1)]\nfor i in range(N):\n    L[P[i]] = 2*i\nB[1] = L[1]-A[1]\nfor i in range(2,N+1):\n    if L[i]>L[i-1]:\n        B[i] = B[i-1]-1\n        A[i] = L[i]-B[i]\n    else:\n        A[i] = A[i-1]+1\n        B[i] = L[i]-A[i]\nb = abs(B[-1])+1\nfor i in range(1,N+1):\n    B[i] += b\nprint(*A[1:])\nprint(*B[1:])",
        "submission_id": "s704904086",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 20,
        "if_count": 1,
        "elif_count": 0,
        "else_count": 1,
        "for_count": 6,
        "while_count": 0,
        "total_control_statements": 8,
        "serialized_code_tokens": "Line 1: N = int(input())\nLine 2: P = list(map(int,input().split()))\nLine 3: A = [1 for _ in range(N+1)]\nLine 4: B = [0 for _ in range(N+1)]\nLine 5: L = [0 for _ in range(N+1)]\nLine 6: for i in range(N):\nLine 7:     L[P[i]] = 2*i\nLine 8: B[1] = L[1]-A[1]\nLine 9: for i in range(2,N+1):\nLine 10:     if L[i]>L[i-1]:\nLine 11:         B[i] = B[i-1]-1\nLine 12:         A[i] = L[i]-B[i]\nLine 13:     else:\nLine 14:         A[i] = A[i-1]+1\nLine 15:         B[i] = L[i]-A[i]\nLine 16: b = abs(B[-1])+1\nLine 17: for i in range(1,N+1):\nLine 18:     B[i] += b\nLine 19: print(*A[1:])\nLine 20: print(*B[1:])",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 17, 19, 20\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 19, 20\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 17, 18, 19, 20\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 17, 19, 20\n",
            "7. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 16, 17, 19, 20\n",
            "9. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20\n",
            "10. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 14, 15, 16, 17, 19, 20\n",
            "11. Lines 1, 2, 3, 4, 5, 6, 8, 9, 16, 17, 18, 19, 20\n",
            "12. Lines 1, 2, 3, 4, 5, 6, 8, 9, 16, 17, 19, 20\n"
        ],
        "number_coverage_options": 12,
        "test_cases": {
            "1": "5\n1 2 3 4 5",
            "2": "3\n3 2 1",
            "3": "8\n5 2 6 4 8 7 1 3"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03465",
        "code_tokens": "N=int(input())\nA=list(map(int,input().split()))\nS=sum(A)\nif S%2==1:\n    check=1\n    for i in range(N):\n        check=check|check<<A[i]\n    for i in range(S//2+1,S+1):\n        if check>>i &1==1:\n            print(i)\n            break\nelse:\n    check=1\n    for i in range(N):\n        check=check|check<<A[i]\n    for i in range(S//2,S+1):\n        if check>>i &1==1:\n            print(i)\n            break",
        "submission_id": "s647030783",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 20,
        "if_count": 3,
        "elif_count": 0,
        "else_count": 1,
        "for_count": 4,
        "while_count": 0,
        "total_control_statements": 8,
        "serialized_code_tokens": "Line 1: N=int(input())\nLine 2: A=list(map(int,input().split()))\nLine 3: S=sum(A)\nLine 4: if S%2==1:\nLine 5:     check=1\nLine 6:     for i in range(N):\nLine 7:         check=check|check<<A[i]\nLine 8:     for i in range(S//2+1,S+1):\nLine 9:         if check>>i &1==1:\nLine 10:             print(i)\nLine 11:             break\nLine 12: else:\nLine 13:     check=1\nLine 14:     for i in range(N):\nLine 15:         check=check|check<<A[i]\nLine 16:     for i in range(S//2,S+1):\nLine 17:         if check>>i &1==1:\nLine 18:             print(i)\nLine 19:             break",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 8, 9\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 8\n",
            "7. Lines 1, 2, 3, 4, 13, 14, 15, 16, 17, 18\n",
            "8. Lines 1, 2, 3, 4, 13, 14, 15, 16, 17\n",
            "9. Lines 1, 2, 3, 4, 13, 14, 15, 16\n",
            "10. Lines 1, 2, 3, 4, 13, 14, 16, 17, 18\n",
            "11. Lines 1, 2, 3, 4, 13, 14, 16, 17\n",
            "12. Lines 1, 2, 3, 4, 13, 14, 16\n"
        ],
        "number_coverage_options": 12,
        "test_cases": {
            "1": "5\n2 4 6 8 10",
            "2": "4\n3 5 7 9",
            "3": "3\n1 -2 3",
            "4": "6\n-3 -5 -7 -9 -11 -13"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0
            ],
            "4": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03187",
        "code_tokens": "import math\nL, N = map(int, input().split())\nX = [None for i in range(N)]\nDistAntiClock, DistClock = [0 for i in range(N+1)], [0 for i in range(N+1)]\nfor i in range(N):\n    X[i] = int(input())\n    DistAntiClock[i+1] = DistAntiClock[i] + 2 * X[i]\nfor i in range(N):\n    DistClock[i+1] = DistClock[i] + (L - X[-1-i]) * 2\nmaxLength = max(X[N-1], L - X[0])\nfor i in range(1, N):\n    finIndex = math.ceil((i + N)/2)\n    if (i + N) % 2 == 0:\n        AntiClockLength = DistAntiClock[finIndex] - DistAntiClock[i-1] - X[finIndex-1] + DistClock[N - finIndex] \n        ClockLength = DistClock[finIndex] - DistClock[i-1] - (L-X[-finIndex]) + DistAntiClock[N - finIndex]\n    else:\n        AntiClockLength = DistAntiClock[finIndex - 1] - DistAntiClock[i-1] + DistClock[N - finIndex + 1] - (L - X[finIndex - 1])\n        ClockLength = DistClock[finIndex - 1] - DistClock[i-1] + DistAntiClock[N - finIndex + 1] - X[N - finIndex]\n    maxLength = max(max(AntiClockLength, ClockLength), maxLength)\nprint(maxLength)",
        "submission_id": "s816214968",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 22,
        "if_count": 1,
        "elif_count": 0,
        "else_count": 1,
        "for_count": 6,
        "while_count": 0,
        "total_control_statements": 8,
        "serialized_code_tokens": "Line 1: import math\nLine 2: L, N = map(int, input().split())\nLine 3: X = [None for i in range(N)]\nLine 4: DistAntiClock, DistClock = [0 for i in range(N+1)], [0 for i in range(N+1)]\nLine 5: for i in range(N):\nLine 6:     X[i] = int(input())\nLine 7:     DistAntiClock[i+1] = DistAntiClock[i] + 2 * X[i]\nLine 8: for i in range(N):\nLine 9:     DistClock[i+1] = DistClock[i] + (L - X[-1-i]) * 2\nLine 10: maxLength = max(X[N-1], L - X[0])\nLine 11: for i in range(1, N):\nLine 12:     finIndex = math.ceil((i + N)/2)\nLine 13:     if (i + N) % 2 == 0:\nLine 14:         AntiClockLength = DistAntiClock[finIndex] - DistAntiClock[i-1] - X[finIndex-1] + DistClock[N - finIndex] \nLine 15:         ClockLength = DistClock[finIndex] - DistClock[i-1] - (L-X[-finIndex]) + DistAntiClock[N - finIndex]\nLine 16:     else:\nLine 17:         AntiClockLength = DistAntiClock[finIndex - 1] - DistAntiClock[i-1] + DistClock[N - finIndex + 1] - (L - X[finIndex - 1])\nLine 18:         ClockLength = DistClock[finIndex - 1] - DistClock[i-1] + DistAntiClock[N - finIndex + 1] - X[N - finIndex]\nLine 19:     maxLength = max(max(AntiClockLength, ClockLength), maxLength)\nLine 20: print(maxLength)",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 20\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 20\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 19, 20\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 17, 18, 19, 20\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 20\n",
            "7. Lines 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20\n",
            "8. Lines 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 17, 18, 19, 20\n",
            "9. Lines 1, 2, 3, 4, 5, 8, 9, 10, 11, 20\n",
            "10. Lines 1, 2, 3, 4, 5, 8, 10, 11, 12, 13, 14, 15, 19, 20\n",
            "11. Lines 1, 2, 3, 4, 5, 8, 10, 11, 12, 13, 17, 18, 19, 20\n",
            "12. Lines 1, 2, 3, 4, 5, 8, 10, 11, 20\n"
        ],
        "number_coverage_options": 12,
        "test_cases": {
            "1": "10 3\n2\n5\n7",
            "2": "5 4\n1\n2\n3\n4",
            "3": "20 5\n10\n8\n15\n3\n18",
            "4": "1000000 10\n500000\n200000\n100000\n300000\n700000\n800000\n900000\n600000\n400000\n850000"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03491",
        "code_tokens": "import sys\nsys.setrecursionlimit(100000)\ndef dfs(cur, dep=0):\n    if cur == -1:\n        x = l - dep\n        return x & -x\n    return dfs(trie[cur][0], dep + 1) ^ dfs(trie[cur][1], dep + 1)\nn, l = map(int, input().split())\ntrie = [[-1, -1] for _ in range(100001)]\nidx = 1\nfor s in (input() for _ in range(n)):\n    cur = 0\n    for c in map(int, s):\n        if trie[cur][c] == -1:\n            trie[cur][c] = idx\n            idx += 1\n        cur = trie[cur][c]\nxor = dfs(trie[0][0]) ^ dfs(trie[0][1])\nprint('Alice' if xor else 'Bob')",
        "submission_id": "s620182355",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 25,
        "if_count": 3,
        "elif_count": 0,
        "else_count": 1,
        "for_count": 4,
        "while_count": 0,
        "total_control_statements": 8,
        "serialized_code_tokens": "Line 1: import sys\nLine 2: sys.setrecursionlimit(100000)\nLine 3: def dfs(cur, dep=0):\nLine 4:     if cur == -1:\nLine 5:         x = l - dep\nLine 6:         return x & -x\nLine 7:     return dfs(trie[cur][0], dep + 1) ^ dfs(trie[cur][1], dep + 1)\nLine 8: n, l = map(int, input().split())\nLine 9: trie = [[-1, -1] for _ in range(100001)]\nLine 10: idx = 1\nLine 11: for s in (input() for _ in range(n)):\nLine 12:     cur = 0\nLine 13:     for c in map(int, s):\nLine 14:         if trie[cur][c] == -1:\nLine 15:             trie[cur][c] = idx\nLine 16:             idx += 1\nLine 17:         cur = trie[cur][c]\nLine 18: xor = dfs(trie[0][0]) ^ dfs(trie[0][1])\nLine 19: print('Alice' if xor else 'Bob')",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 18, 19\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 18\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 18\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 18, 19\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 18\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18\n",
            "7. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 17, 18\n",
            "9. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18\n",
            "10. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19\n",
            "11. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18\n",
            "12. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18\n"
        ],
        "number_coverage_options": 12,
        "test_cases": {
            "1": "1 3\n011\n101\n110",
            "2": "2 4\n1010\n0101",
            "3": "4 3\n001\n011\n100\n101"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ],
            "2": [
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ],
            "3": [
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p01866",
        "code_tokens": "n = int(input())\nbits_raw = input()\nbits = [int(bits_raw[i]) for i in range(n)]\nm = int(input())\nones = []\nzeros = []\nfor i in range(n):\n    if(bits[i] == 1):\n        ones.append(i)\n    else:\n        zeros.append(i)\nif(len(zeros) > m):\n    for i in range(m):\n        bits[zeros[i]] = 1\n    print(''.join(map(str, bits)))\nelse:\n    allone = [1 for i in range(n)]\n    l = len(ones)\n    for i in range(m - len(zeros)):\n        allone[ones[l - i - 1]] = 0\n    print(''.join(map(str, allone)))",
        "submission_id": "s547095050",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 21,
        "if_count": 2,
        "elif_count": 0,
        "else_count": 2,
        "for_count": 5,
        "while_count": 0,
        "total_control_statements": 9,
        "serialized_code_tokens": "Line 1: n = int(input())\nLine 2: bits_raw = input()\nLine 3: bits = [int(bits_raw[i]) for i in range(n)]\nLine 4: m = int(input())\nLine 5: ones = []\nLine 6: zeros = []\nLine 7: for i in range(n):\nLine 8:     if(bits[i] == 1):\nLine 9:         ones.append(i)\nLine 10:     else:\nLine 11:         zeros.append(i)\nLine 12: if(len(zeros) > m):\nLine 13:     for i in range(m):\nLine 14:         bits[zeros[i]] = 1\nLine 15:     print(''.join(map(str, bits)))\nLine 16: else:\nLine 17:     allone = [1 for i in range(n)]\nLine 18:     l = len(ones)\nLine 19:     for i in range(m - len(zeros)):\nLine 20:         allone[ones[l - i - 1]] = 0\nLine 21:     print(''.join(map(str, allone)))",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 17, 18, 19, 20, 21\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 17, 18, 19, 21\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 15\n",
            "7. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 17, 18, 19, 20, 21\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 17, 18, 19, 21\n",
            "9. Lines 1, 2, 3, 4, 5, 6, 7, 12, 13, 14, 15\n",
            "10. Lines 1, 2, 3, 4, 5, 6, 7, 12, 13, 15\n",
            "11. Lines 1, 2, 3, 4, 5, 6, 7, 12, 17, 18, 19, 20, 21\n",
            "12. Lines 1, 2, 3, 4, 5, 6, 7, 12, 17, 18, 19, 21\n"
        ],
        "number_coverage_options": 12,
        "test_cases": {
            "1": "5\n10010\n2",
            "2": "6\n111000\n3",
            "3": "8\n00000000\n5",
            "4": "10\n1010101010\n4"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03140",
        "code_tokens": "n=int(input())\na=list(input())\nb=list(input())\nc=list(input())\nans=0\nfor i in range(n):\n  if a[i] == b[i] and a[i] == c[i] and b[i] == c[i]:\n    ans+=0\n  elif a[i] != b[i] and a[i] == c[i] and b[i] == c[i]:\n    ans+=1\n  elif a[i] == b[i] and a[i] != c[i] and b[i] == c[i]:\n    ans+=1\n  elif a[i] == b[i] and a[i] == c[i] and b[i] != c[i]:\n    ans+=1\n  elif a[i] != b[i] and a[i] == c[i] and b[i] != c[i]:\n    ans+=1\n  elif a[i] == b[i] and a[i] != c[i] and b[i] != c[i]:\n    ans+=1\n  elif a[i] != b[i] and a[i] != c[i] and b[i] == c[i]:\n    ans+=1\n  elif a[i] != b[i] and a[i] != c[i] and b[i] != c[i]:\n    ans+=2\nprint(str(ans))",
        "submission_id": "s022362719",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 23,
        "if_count": 1,
        "elif_count": 7,
        "else_count": 0,
        "for_count": 1,
        "while_count": 0,
        "total_control_statements": 9,
        "serialized_code_tokens": "Line 1: n=int(input())\nLine 2: a=list(input())\nLine 3: b=list(input())\nLine 4: c=list(input())\nLine 5: ans=0\nLine 6: for i in range(n):\nLine 7:   if a[i] == b[i] and a[i] == c[i] and b[i] == c[i]:\nLine 8:     ans+=0\nLine 9:   elif a[i] != b[i] and a[i] == c[i] and b[i] == c[i]:\nLine 10:     ans+=1\nLine 11:   elif a[i] == b[i] and a[i] != c[i] and b[i] == c[i]:\nLine 12:     ans+=1\nLine 13:   elif a[i] == b[i] and a[i] == c[i] and b[i] != c[i]:\nLine 14:     ans+=1\nLine 15:   elif a[i] != b[i] and a[i] == c[i] and b[i] != c[i]:\nLine 16:     ans+=1\nLine 17:   elif a[i] == b[i] and a[i] != c[i] and b[i] != c[i]:\nLine 18:     ans+=1\nLine 19:   elif a[i] != b[i] and a[i] != c[i] and b[i] == c[i]:\nLine 20:     ans+=1\nLine 21:   elif a[i] != b[i] and a[i] != c[i] and b[i] != c[i]:\nLine 22:     ans+=2\nLine 23: print(str(ans))",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 23\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 9, 10, 23\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 23\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 9, 11, 13, 14, 23\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 9, 11, 13, 15, 16, 23\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 7, 9, 11, 13, 15, 17, 18, 23\n",
            "7. Lines 1, 2, 3, 4, 5, 6, 7, 9, 11, 13, 15, 17, 19, 20, 23\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22, 23\n",
            "9. Lines 1, 2, 3, 4, 5, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23\n",
            "10. Lines 1, 2, 3, 4, 5, 6, 23\n"
        ],
        "number_coverage_options": 10,
        "test_cases": {
            "1": "3\n001\n001\n001",
            "2": "4\n1111\n1111\n1111",
            "3": "5\n01010\n10101\n01010",
            "4": "6\n110011\n001100\n110011"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03027",
        "code_tokens": "from collections import *\nmod=10**6+3\nfac=[0 for i in range(mod)]\nfac[0]=1\nfor i in range(0,len(fac)-1):\n    fac[i+1]=(fac[i]*(i+1))%mod\nfac[0]=0\nQ=int(input())\nfor q in range(Q):\n    x,d,n=map(int,input().split())\n    if d>0:\n        D=pow(d,mod-2,mod)\n        a=(x-d%mod)*D%mod\n        b=(a+n)%mod\n        if a<b and a+n<mod:\n            if a>0:\n                value=fac[b]*pow(fac[a],mod-2,mod)*pow(d,n,mod)\n            else:\n                value=fac[b]*pow(d,n,mod)\n            print(value%mod)\n        else:\n            print(0)\n    else:\n        print(pow(x,n,mod))",
        "submission_id": "s347969747",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 24,
        "if_count": 3,
        "elif_count": 0,
        "else_count": 3,
        "for_count": 3,
        "while_count": 0,
        "total_control_statements": 9,
        "serialized_code_tokens": "Line 1: from collections import *\nLine 2: mod=10**6+3\nLine 3: fac=[0 for i in range(mod)]\nLine 4: fac[0]=1\nLine 5: for i in range(0,len(fac)-1):\nLine 6:     fac[i+1]=(fac[i]*(i+1))%mod\nLine 7: fac[0]=0\nLine 8: Q=int(input())\nLine 9: for q in range(Q):\nLine 10:     x,d,n=map(int,input().split())\nLine 11:     if d>0:\nLine 12:         D=pow(d,mod-2,mod)\nLine 13:         a=(x-d%mod)*D%mod\nLine 14:         b=(a+n)%mod\nLine 15:         if a<b and a+n<mod:\nLine 16:             if a>0:\nLine 17:                 value=fac[b]*pow(fac[a],mod-2,mod)*pow(d,n,mod)\nLine 18:             else:\nLine 19:                 value=fac[b]*pow(d,n,mod)\nLine 20:             print(value%mod)\nLine 21:         else:\nLine 22:             print(0)\nLine 23:     else:\nLine 24:         print(pow(x,n,mod))",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 22\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 24\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9\n",
            "6. Lines 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20\n",
            "7. Lines 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20\n",
            "8. Lines 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 22\n",
            "9. Lines 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 24\n",
            "10. Lines 1, 2, 3, 4, 5, 7, 8, 9\n"
        ],
        "number_coverage_options": 10,
        "test_cases": {
            "1": "1\n5 2 3",
            "2": "2\n10 3 4\n7 1 5",
            "3": "1\n100 -2 3",
            "4": "2\n8 -5 2\n15 1 6"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                0,
                0,
                0,
                0
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                0,
                0,
                0,
                0
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03637",
        "code_tokens": "N = int(input())\na = list(map(int,input().split()))\nodd = by2 = by4 = 0\nfor c in a:\n    if c % 4 == 0:\n        by4 += 1\n    elif c % 2 == 0:\n        by2 += 1\n    else:\n        odd += 1\nif N == 2:\n    if by4>=1:\n        print('Yes')\n    elif by2 == 2:\n        print('Yes')\n    else:\n        print('No')\nelif N == 3:\n    if odd == 3:\n        print('No')\n    elif odd==2:\n        if by4==1:\n            print('Yes')\n        else:\n            print('No')\n    elif odd==1:\n        if by4>=1:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print('Yes')\nelse:\n    if by2 > 0:\n        if by4-odd>=0:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        if by4-odd>=-1:\n            print('Yes')\n        else:\n            print('No')",
        "submission_id": "s755824162",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 28,
        "if_count": 9,
        "elif_count": 5,
        "else_count": 9,
        "for_count": 1,
        "while_count": 0,
        "total_control_statements": 24,
        "serialized_code_tokens": "Line 1: N = int(input())\nLine 2: a = list(map(int,input().split()))\nLine 3: odd = by2 = by4 = 0\nLine 4: for c in a:\nLine 5:     if c % 4 == 0:\nLine 6:         by4 += 1\nLine 7:     elif c % 2 == 0:\nLine 8:         by2 += 1\nLine 9:     else:\nLine 10:         odd += 1\nLine 11: if N == 2:\nLine 12:     if by4>=1:\nLine 13:         print('Yes')\nLine 14:     elif by2 == 2:\nLine 15:         print('Yes')\nLine 16:     else:\nLine 17:         print('No')\nLine 18: elif N == 3:\nLine 19:     if odd == 3:\nLine 20:         print('No')\nLine 21:     elif odd==2:\nLine 22:         if by4==1:\nLine 23:             print('Yes')\nLine 24:         else:\nLine 25:             print('No')\nLine 26:     elif odd==1:\nLine 27:         if by4>=1:\nLine 28:             print('Yes')\nLine 29:         else:\nLine 30:             print('No')\nLine 31:     else:\nLine 32:         print('Yes')\nLine 33: else:\nLine 34:     if by2 > 0:\nLine 35:         if by4-odd>=0:\nLine 36:             print('Yes')\nLine 37:         else:\nLine 38:             print('No')\nLine 39:     else:\nLine 40:         if by4-odd>=-1:\nLine 41:             print('Yes')\nLine 42:         else:\nLine 43:             print('No')",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 11, 12, 13\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 11, 12, 14, 15\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 11, 12, 14, 17\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 11, 18, 19, 20\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 11, 18, 19, 21, 22, 23\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 11, 18, 19, 21, 22, 25\n",
            "7. Lines 1, 2, 3, 4, 5, 6, 11, 18, 19, 21, 26, 27, 28\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 11, 18, 19, 21, 26, 27, 30\n",
            "9. Lines 1, 2, 3, 4, 5, 6, 11, 18, 19, 21, 26, 32\n",
            "10. Lines 1, 2, 3, 4, 5, 6, 11, 18, 34, 35, 36\n",
            "11. Lines 1, 2, 3, 4, 5, 6, 11, 18, 34, 35, 38\n",
            "12. Lines 1, 2, 3, 4, 5, 6, 11, 18, 34, 40, 41\n",
            "13. Lines 1, 2, 3, 4, 5, 6, 11, 18, 34, 40, 43\n",
            "14. Lines 1, 2, 3, 4, 5, 7, 8, 11, 12, 13\n",
            "15. Lines 1, 2, 3, 4, 5, 7, 8, 11, 12, 14, 15\n",
            "16. Lines 1, 2, 3, 4, 5, 7, 8, 11, 12, 14, 17\n",
            "17. Lines 1, 2, 3, 4, 5, 7, 8, 11, 18, 19, 20\n",
            "18. Lines 1, 2, 3, 4, 5, 7, 8, 11, 18, 19, 21, 22, 23\n",
            "19. Lines 1, 2, 3, 4, 5, 7, 8, 11, 18, 19, 21, 22, 25\n",
            "20. Lines 1, 2, 3, 4, 5, 7, 8, 11, 18, 19, 21, 26, 27, 28\n",
            "21. Lines 1, 2, 3, 4, 5, 7, 8, 11, 18, 19, 21, 26, 27, 30\n",
            "22. Lines 1, 2, 3, 4, 5, 7, 8, 11, 18, 19, 21, 26, 32\n",
            "23. Lines 1, 2, 3, 4, 5, 7, 8, 11, 18, 34, 35, 36\n",
            "24. Lines 1, 2, 3, 4, 5, 7, 8, 11, 18, 34, 35, 38\n",
            "25. Lines 1, 2, 3, 4, 5, 7, 8, 11, 18, 34, 40, 41\n",
            "26. Lines 1, 2, 3, 4, 5, 7, 8, 11, 18, 34, 40, 43\n",
            "27. Lines 1, 2, 3, 4, 5, 7, 10, 11, 12, 13\n",
            "28. Lines 1, 2, 3, 4, 5, 7, 10, 11, 12, 14, 15\n",
            "29. Lines 1, 2, 3, 4, 5, 7, 10, 11, 12, 14, 17\n",
            "30. Lines 1, 2, 3, 4, 5, 7, 10, 11, 18, 19, 20\n",
            "31. Lines 1, 2, 3, 4, 5, 7, 10, 11, 18, 19, 21, 22, 23\n",
            "32. Lines 1, 2, 3, 4, 5, 7, 10, 11, 18, 19, 21, 22, 25\n",
            "33. Lines 1, 2, 3, 4, 5, 7, 10, 11, 18, 19, 21, 26, 27, 28\n",
            "34. Lines 1, 2, 3, 4, 5, 7, 10, 11, 18, 19, 21, 26, 27, 30\n",
            "35. Lines 1, 2, 3, 4, 5, 7, 10, 11, 18, 19, 21, 26, 32\n",
            "36. Lines 1, 2, 3, 4, 5, 7, 10, 11, 18, 34, 35, 36\n",
            "37. Lines 1, 2, 3, 4, 5, 7, 10, 11, 18, 34, 35, 38\n",
            "38. Lines 1, 2, 3, 4, 5, 7, 10, 11, 18, 34, 40, 41\n",
            "39. Lines 1, 2, 3, 4, 5, 7, 10, 11, 18, 34, 40, 43\n",
            "40. Lines 1, 2, 3, 4, 11, 12, 13\n",
            "41. Lines 1, 2, 3, 4, 11, 12, 14, 15\n",
            "42. Lines 1, 2, 3, 4, 11, 12, 14, 17\n",
            "43. Lines 1, 2, 3, 4, 11, 18, 19, 20\n",
            "44. Lines 1, 2, 3, 4, 11, 18, 19, 21, 22, 23\n",
            "45. Lines 1, 2, 3, 4, 11, 18, 19, 21, 22, 25\n",
            "46. Lines 1, 2, 3, 4, 11, 18, 19, 21, 26, 27, 28\n",
            "47. Lines 1, 2, 3, 4, 11, 18, 19, 21, 26, 27, 30\n",
            "48. Lines 1, 2, 3, 4, 11, 18, 19, 21, 26, 32\n",
            "49. Lines 1, 2, 3, 4, 11, 18, 34, 35, 36\n",
            "50. Lines 1, 2, 3, 4, 11, 18, 34, 35, 38\n",
            "51. Lines 1, 2, 3, 4, 11, 18, 34, 40, 41\n",
            "52. Lines 1, 2, 3, 4, 11, 18, 34, 40, 43\n"
        ],
        "test_cases": {
            "1": "2\n4 6",
            "2": "2\n5 7",
            "3": "3\n4 7 9",
            "4": "3\n5 7 9",
            "5": "4\n2 4 7 9",
            "6": "4 3 5 7 9",
            "7": "5\n4 6 8 10 11",
            "8": "5\n5 7 9 11 13"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "5": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0
            ],
            "6": [
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "7": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "8": [
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03695",
        "code_tokens": "N=int(input())\na=list(map(int,input().split()))\nb,c=[],0\nb.append(len([a for a in a if a<400]))\nb.append(len([a for a in a if a<800 and a>=400]))\nb.append(len([a for a in a if a<1200 and a>=800]))\nb.append(len([a for a in a if a<1600 and a>=1200]))\nb.append(len([a for a in a if a<2000 and a>=1600]))\nb.append(len([a for a in a if a<2400 and a>=2000]))\nb.append(len([a for a in a if a<2800 and a>=2400]))\nb.append(len([a for a in a if a<3200 and a>=2800]))\nb.append(len([a for a in a if a>=3200]))\nfor i in range(8):\n    if b[i]>0:\n        c+=1\nif b[8]>0:\n    if c==0:\n        print(1,b[8])\n    else:        \n        print(c,c+b[8])\nelse:\n    print(c,c)",
        "submission_id": "s727764716",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 22,
        "if_count": 12,
        "elif_count": 0,
        "else_count": 2,
        "for_count": 10,
        "while_count": 0,
        "total_control_statements": 24,
        "serialized_code_tokens": "Line 1: N=int(input())\nLine 2: a=list(map(int,input().split()))\nLine 3: b,c=[],0\nLine 4: b.append(len([a for a in a if a<400]))\nLine 5: b.append(len([a for a in a if a<800 and a>=400]))\nLine 6: b.append(len([a for a in a if a<1200 and a>=800]))\nLine 7: b.append(len([a for a in a if a<1600 and a>=1200]))\nLine 8: b.append(len([a for a in a if a<2000 and a>=1600]))\nLine 9: b.append(len([a for a in a if a<2400 and a>=2000]))\nLine 10: b.append(len([a for a in a if a<2800 and a>=2400]))\nLine 11: b.append(len([a for a in a if a<3200 and a>=2800]))\nLine 12: b.append(len([a for a in a if a>=3200]))\nLine 13: for i in range(8):\nLine 14:     if b[i]>0:\nLine 15:         c+=1\nLine 16: if b[8]>0:\nLine 17:     if c==0:\nLine 18:         print(1,b[8])\nLine 19:     else:        \nLine 20:         print(c,c+b[8])\nLine 21: else:\nLine 22:     print(c,c)",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 22\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 22\n",
            "7. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 20\n",
            "9. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 22\n"
        ],
        "test_cases": {
            "1": "5\n200 500 1000 1500 2500",
            "2": "6\n400 800 1200 1600 2000 2400",
            "3": "4\n200 400 800 2400",
            "4": "7\n300 700 1100 1900 2200 2800 3400",
            "5": "3\n1000 1500 3500"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0
            ],
            "5": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03074",
        "code_tokens": "n,k=map(int,input().split())\ns=list(map(int,str(input())))\nif s[0]==1:\n  one_st=[0]+[i+1 for i in range(n-1) if s[i]==0 and s[i+1]==1]\n  zero_st=[i+1 for i in range(n-1) if s[i]==1 and s[i+1]==0]\nelse:\n  one_st=[i+1 for i in range(n-1) if s[i]==0 and s[i+1]==1]\n  zero_st=[0]+[i+1 for i in range(n-1) if s[i]==1 and s[i+1]==0]\nif s[n-1]==1:\n  one_en=[i for i in range(n-1) if s[i]==1 and s[i+1]==0]+[n-1]\n  zero_en=[i for i in range(n-1) if s[i]==0 and s[i+1]==1]\nelse:\n  one_en=[i for i in range(n-1) if s[i]==1 and s[i+1]==0]\n  zero_en=[i for i in range(n-1) if s[i]==0 and s[i+1]==1]+[n-1]\nif len(zero_st) <= k:\n  x=n\nelse:\n  y=[one_en[i+k]-one_st[i]+1 for i in range(len(zero_st)-k+1) if i+k+1<=len(one_en)]\n  y=y+[one_en[k-1]+1,n-one_st[len(one_st)-k]]\n  x=max(y)\nprint(x)",
        "submission_id": "s997982847",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 21,
        "if_count": 12,
        "elif_count": 0,
        "else_count": 3,
        "for_count": 9,
        "while_count": 0,
        "total_control_statements": 24,
        "serialized_code_tokens": "Line 1: n,k=map(int,input().split())\nLine 2: s=list(map(int,str(input())))\nLine 3: if s[0]==1:\nLine 4:   one_st=[0]+[i+1 for i in range(n-1) if s[i]==0 and s[i+1]==1]\nLine 5:   zero_st=[i+1 for i in range(n-1) if s[i]==1 and s[i+1]==0]\nLine 6: else:\nLine 7:   one_st=[i+1 for i in range(n-1) if s[i]==0 and s[i+1]==1]\nLine 8:   zero_st=[0]+[i+1 for i in range(n-1) if s[i]==1 and s[i+1]==0]\nLine 9: if s[n-1]==1:\nLine 10:   one_en=[i for i in range(n-1) if s[i]==1 and s[i+1]==0]+[n-1]\nLine 11:   zero_en=[i for i in range(n-1) if s[i]==0 and s[i+1]==1]\nLine 12: else:\nLine 13:   one_en=[i for i in range(n-1) if s[i]==1 and s[i+1]==0]\nLine 14:   zero_en=[i for i in range(n-1) if s[i]==0 and s[i+1]==1]+[n-1]\nLine 15: if len(zero_st) <= k:\nLine 16:   x=n\nLine 17: else:\nLine 18:   y=[one_en[i+k]-one_st[i]+1 for i in range(len(zero_st)-k+1) if i+k+1<=len(one_en)]\nLine 19:   y=y+[one_en[k-1]+1,n-one_st[len(one_st)-k]]\nLine 20:   x=max(y)\nLine 21: print(x)",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 9, 10, 11, 15, 16, 21\n",
            "2. Lines 1, 2, 3, 4, 5, 9, 10, 11, 15, 18, 19, 20, 21\n",
            "3. Lines 1, 2, 3, 4, 5, 9, 13, 14, 15, 16, 21\n",
            "4. Lines 1, 2, 3, 4, 5, 9, 13, 14, 15, 18, 19, 20, 21\n",
            "5. Lines 1, 2, 3, 7, 8, 9, 10, 11, 15, 16, 21\n",
            "6. Lines 1, 2, 3, 7, 8, 9, 10, 11, 15, 18, 19, 20, 21\n",
            "7. Lines 1, 2, 3, 7, 8, 9, 13, 14, 15, 16, 21\n",
            "8. Lines 1, 2, 3, 7, 8, 9, 13, 14, 15, 18, 19, 20, 21\n"
        ],
        "test_cases": {
            "1": "5 2\n11010",
            "2": "6 1\n101101",
            "3": "4 2\n0110",
            "4": "8 3\n10101010",
            "5": "7 2\n1110011"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "3": [
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "5": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03244",
        "code_tokens": "import collections\nn = int(input())\nv = list(map(int, input().split()))\nv1 = [v[i*2+1] for i in range(n//2)]\nv2 = [v[i*2] for i in range(n//2)]\nc1 = collections.Counter(v1).most_common()\nc2 = collections.Counter(v2).most_common()\nif len(set(v1)) == len(set(v2)) == 1:\n  if c1[0][0] != c2[0][0]:\n    print(0)\n  else:\n    print(min(len(v1), len(v2)))\nelif len(set(v1))==1:\n  if c1[0][0] != c2[0][0]:\n    print(sum([i[1] for i in c2])-c2[0][1])\n  else:\n    print(sum([i[1] for i in c2])-c2[1][1])\nelif len(set(v2))==1:\n  if c1[0][0] != c2[0][0]:\n    print(sum([i[1] for i in c1])-c1[0][1])\n  else:\n    print(sum([i[1] for i in c1])-c1[1][1])\nelse:\n  if c1[0][0] != c2[0][0]:\n    print((sum([i[1] for i in c1])-c1[0][1]) + (sum([i[1] for i in c2])-c2[0][1]))\n  else:\n    print(min((sum([i[1] for i in c1])-c1[0][1])+(sum([i[1] for i in c2])-c2[1][1]),\n              (sum([i[1] for i in c1])-c1[1][1])+(sum([i[1] for i in c2])-c2[0][1])))",
        "submission_id": "s191337530",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 29,
        "if_count": 5,
        "elif_count": 2,
        "else_count": 5,
        "for_count": 12,
        "while_count": 0,
        "total_control_statements": 24,
        "serialized_code_tokens": "Line 1: import collections\nLine 2: n = int(input())\nLine 3: v = list(map(int, input().split()))\nLine 4: v1 = [v[i*2+1] for i in range(n//2)]\nLine 5: v2 = [v[i*2] for i in range(n//2)]\nLine 6: c1 = collections.Counter(v1).most_common()\nLine 7: c2 = collections.Counter(v2).most_common()\nLine 8: if len(set(v1)) == len(set(v2)) == 1:\nLine 9:   if c1[0][0] != c2[0][0]:\nLine 10:     print(0)\nLine 11:   else:\nLine 12:     print(min(len(v1), len(v2)))\nLine 13: elif len(set(v1))==1:\nLine 14:   if c1[0][0] != c2[0][0]:\nLine 15:     print(sum([i[1] for i in c2])-c2[0][1])\nLine 16:   else:\nLine 17:     print(sum([i[1] for i in c2])-c2[1][1])\nLine 18: elif len(set(v2))==1:\nLine 19:   if c1[0][0] != c2[0][0]:\nLine 20:     print(sum([i[1] for i in c1])-c1[0][1])\nLine 21:   else:\nLine 22:     print(sum([i[1] for i in c1])-c1[1][1])\nLine 23: else:\nLine 24:   if c1[0][0] != c2[0][0]:\nLine 25:     print((sum([i[1] for i in c1])-c1[0][1]) + (sum([i[1] for i in c2])-c2[0][1]))\nLine 26:   else:\nLine 27:     print(min((sum([i[1] for i in c1])-c1[0][1])+(sum([i[1] for i in c2])-c2[1][1]),\nLine 28:               (sum([i[1] for i in c1])-c1[1][1])+(sum([i[1] for i in c2])-c2[0][1])))",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 15\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 17\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 18, 19, 20\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 18, 19, 22\n",
            "7. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 18, 24, 25\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 18, 24, 27\n"
        ],
        "test_cases": {
            "1": "6\n1 1 2 2 3 3",
            "2": "4\n1 2 1 1",
            "3": "5\n1 1 1 1 2",
            "4": "4\n1 2 2 2"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                1,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03132",
        "code_tokens": "L = int(input())\nA = [int(input()) for _ in range(L)]\nINF = 10**20\nDP = [[INF for i in range(5)] for _ in range(L)]\nDP[0][0] = A[0]\nDP[0][1] = (2 if A[0] == 0 else 1 if A[0] % 2 == 1 else 0)\nDP[0][2] = (1 if A[0] % 2 == 0 else 0)\nDP[0][3] = (2 if A[0] == 0 else 1 if A[0] % 2 == 1 else 0)\nDP[0][4] = A[0]\nfor i in range(1, L):\n    a = A[i]\n    DP[i][0] = DP[i-1][0] + a\n    DP[i][1] = min(DP[i-1][:2]) + (2 if a == 0 else 1 if a % 2 == 1 else 0)\n    DP[i][2] = min(DP[i-1][:3]) + (1 if a % 2 == 0 else 0)\n    DP[i][3] = min(DP[i-1][:4]) + (2 if a == 0 else 1 if a % 2 == 1 else 0)\n    DP[i][4] = min(DP[i-1]) + a\nprint(min(DP[L-1]))",
        "submission_id": "s092155259",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 19,
        "if_count": 10,
        "elif_count": 0,
        "else_count": 10,
        "for_count": 4,
        "while_count": 0,
        "total_control_statements": 24,
        "serialized_code_tokens": "Line 1: L = int(input())\nLine 2: A = [int(input()) for _ in range(L)]\nLine 3: INF = 10**20\nLine 4: DP = [[INF for i in range(5)] for _ in range(L)]\nLine 5: DP[0][0] = A[0]\nLine 6: DP[0][1] = (2 if A[0] == 0 else 1 if A[0] % 2 == 1 else 0)\nLine 7: DP[0][2] = (1 if A[0] % 2 == 0 else 0)\nLine 8: DP[0][3] = (2 if A[0] == 0 else 1 if A[0] % 2 == 1 else 0)\nLine 9: DP[0][4] = A[0]\nLine 10: for i in range(1, L):\nLine 11:     a = A[i]\nLine 12:     DP[i][0] = DP[i-1][0] + a\nLine 13:     DP[i][1] = min(DP[i-1][:2]) + (2 if a == 0 else 1 if a % 2 == 1 else 0)\nLine 14:     DP[i][2] = min(DP[i-1][:3]) + (1 if a % 2 == 0 else 0)\nLine 15:     DP[i][3] = min(DP[i-1][:4]) + (2 if a == 0 else 1 if a % 2 == 1 else 0)\nLine 16:     DP[i][4] = min(DP[i-1]) + a\nLine 17: print(min(DP[L-1]))",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 17\n"
        ],
        "test_cases": {
            "1": "5\n1\n2\n3\n4\n5",
            "2": "3\n0\n0\n0",
            "3": "4\n0\n2\n0\n3",
            "4": "6\n1\n2\n3\n4\n5\n6"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03798",
        "code_tokens": "n=int(input())\ns=input()\nl = [0] * n\nl2 = [0 if s[i]=='o' else 1 for i in range(n)]\ndef f(x,y):\n    l[0]=x\n    l[1]=y\n    for i in range(2,n):\n        l[i]=l[i-2]^l[i-1]^l2[i-1]\n    if l[0] == l[n-2]^l[n-1]^l2[n-1] and l[1]==l[n-1]^l[0]^l2[0]:\n        return True\n    else: return False\nif f(0,0):\n    print(''.join(['S' if not l[i] else 'W' for i in range(n)]))\nelif f(0,1):\n    print(''.join(['S' if not l[i] else 'W' for i in range(n)]))\nelif f(1,0):\n    print(''.join(['S' if not l[i] else 'W' for i in range(n)]))\nelif f(1,1):\n    print(''.join(['S' if not l[i] else 'W' for i in range(n)]))\nelse:\n    print(-1)",
        "submission_id": "s108820173",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 23,
        "if_count": 7,
        "elif_count": 3,
        "else_count": 7,
        "for_count": 6,
        "while_count": 0,
        "total_control_statements": 23,
        "serialized_code_tokens": "Line 1: n=int(input())\nLine 2: s=input()\nLine 3: l = [0] * n\nLine 4: l2 = [0 if s[i]=='o' else 1 for i in range(n)]\nLine 5: def f(x,y):\nLine 6:     l[0]=x\nLine 7:     l[1]=y\nLine 8:     for i in range(2,n):\nLine 9:         l[i]=l[i-2]^l[i-1]^l2[i-1]\nLine 10:     if l[0] == l[n-2]^l[n-1]^l2[n-1] and l[1]==l[n-1]^l[0]^l2[0]:\nLine 11:         return True\nLine 12:     else: return False\nLine 13: if f(0,0):\nLine 14:     print(''.join(['S' if not l[i] else 'W' for i in range(n)]))\nLine 15: elif f(0,1):\nLine 16:     print(''.join(['S' if not l[i] else 'W' for i in range(n)]))\nLine 17: elif f(1,0):\nLine 18:     print(''.join(['S' if not l[i] else 'W' for i in range(n)]))\nLine 19: elif f(1,1):\nLine 20:     print(''.join(['S' if not l[i] else 'W' for i in range(n)]))\nLine 21: else:\nLine 22:     print(-1)",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 19, 20\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 19, 22\n"
        ],
        "test_cases": {
            "1": "6\nooxxox",
            "2": "3\nooo",
            "3": "5\noxoxx",
            "4": "7\nxoxxoxo"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03545",
        "code_tokens": "import numpy as np\nimport sys\nimport math\ns=input()\nt=[]\nfor i in range(4):\n    t.append(int(s[i]))\ntemp=0\nfor i in range(2):\n    temp+=(t[0]+t[1] if i==0 else t[0]-t[1])\n    for j in range(2):\n        temp+=(t[2] if j==0 else -t[2])\n        for k in range(2):\n            temp+=(t[3] if k==0 else -t[3])\n            if temp==7:\n                print(s[0]+('+' if i==0 else '-')+s[1]+('+' if j==0 else '-')+s[2]+('+' if k==0 else '-')+s[3]+'=7')\n                sys.exit()\n            else:\n                temp-=(t[3] if k==0 else -t[3])\n        temp-=(t[2] if j==0 else -t[2])\n    temp=0",
        "submission_id": "s321542736",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 22,
        "if_count": 9,
        "elif_count": 0,
        "else_count": 9,
        "for_count": 4,
        "while_count": 0,
        "total_control_statements": 22,
        "serialized_code_tokens": "Line 1: import numpy as np\nLine 2: import sys\nLine 3: import math\nLine 4: s=input()\nLine 5: t=[]\nLine 6: for i in range(4):\nLine 7:     t.append(int(s[i]))\nLine 8: temp=0\nLine 9: for i in range(2):\nLine 10:     temp+=(t[0]+t[1] if i==0 else t[0]-t[1])\nLine 11:     for j in range(2):\nLine 12:         temp+=(t[2] if j==0 else -t[2])\nLine 13:         for k in range(2):\nLine 14:             temp+=(t[3] if k==0 else -t[3])\nLine 15:             if temp==7:\nLine 16:                 print(s[0]+('+' if i==0 else '-')+s[1]+('+' if j==0 else '-')+s[2]+('+' if k==0 else '-')+s[3]+'=7')\nLine 17:                 sys.exit()\nLine 18:             else:\nLine 19:                 temp-=(t[3] if k==0 else -t[3])\nLine 20:         temp-=(t[2] if j==0 else -t[2])\nLine 21:     temp=0",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 21\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 20, 21\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 21\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21\n",
            "7. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 21\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 20, 21\n",
            "9. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 21\n",
            "10. Lines 1, 2, 3, 4, 5, 6, 8, 9\n"
        ],
        "test_cases": {
            "1": "1223",
            "2": "9876",
            "3": "1189",
            "4": "1111"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p04045",
        "code_tokens": "n,k=map(int,input().split())\nd=list(map(int,input().split()))\nuse = [str(i) for i in range(10) if i not in d]\nmon5 = [int(i+j+k+l+m) for i in use for j in use for k in use for l in use for m in use if int(i+j+k+l+m)>=n]\nmon4 = [int(i+j+k+l) for i in use for j in use for k in use for l in use if int(i+j+k+l)>=n]\nmon3 = [int(i+j+k) for i in use for j in use for k in use if int(i+j+k)>=n]\nmon2 = [int(i+j) for i in use for j in use if int(i+j)>=n]\nmon1 = [int(i) for i in use if int(i)>=n]\nprint(min(mon1+mon2+mon3+mon4+mon5))",
        "submission_id": "s355366470",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 14,
        "if_count": 6,
        "elif_count": 0,
        "else_count": 0,
        "for_count": 16,
        "while_count": 0,
        "total_control_statements": 22,
        "serialized_code_tokens": "Line 1: n,k=map(int,input().split())\nLine 2: d=list(map(int,input().split()))\nLine 3: use = [str(i) for i in range(10) if i not in d]\nLine 4: mon5 = [int(i+j+k+l+m) for i in use for j in use for k in use for l in use for m in use if int(i+j+k+l+m)>=n]\nLine 5: mon4 = [int(i+j+k+l) for i in use for j in use for k in use for l in use if int(i+j+k+l)>=n]\nLine 6: mon3 = [int(i+j+k) for i in use for j in use for k in use if int(i+j+k)>=n]\nLine 7: mon2 = [int(i+j) for i in use for j in use if int(i+j)>=n]\nLine 8: mon1 = [int(i) for i in use if int(i)>=n]\nLine 9: print(min(mon1+mon2+mon3+mon4+mon5))",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9\n"
        ],
        "test_cases": {
            "1": "1000 2\n1 2 3",
            "2": "10 2\n1",
            "3": "1000 4\n9"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03836",
        "code_tokens": "sx, sy, tx, ty = map(int, input().split())\ndiff_x = tx-sx\ndiff_y = ty-sy\nans = ''\nans += 'U'*abs(diff_y) if diff_x>0 else 'D'*abs(diff_y) \nans += 'R'*abs(diff_x+1) if diff_x>0 else 'L'*abs(diff_x+1) \nans += 'U'*(abs(diff_y)+1) if diff_x<0 else 'D'*(abs(diff_y)+1) \nans += 'R'*abs(diff_x+1) if diff_x<0 else 'L'*abs(diff_x+1) \nans += 'U' if diff_x>0 else 'D' \nans += 'R' if diff_x<0 else 'L' \nans += 'U'*abs(diff_y+1) if diff_x>0 else 'D'*abs(diff_y+1) \nans += 'R'*abs(diff_x+1) if diff_x>0 else 'L'*abs(diff_x+1) \nans += 'U'*(abs(diff_y)+1) if diff_x<0 else 'D'*(abs(diff_y)+1) \nans += 'R'*abs(diff_x) if diff_x<0 else 'L'*abs(diff_x) \nprint(ans)",
        "submission_id": "s912008095",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 18,
        "if_count": 10,
        "elif_count": 0,
        "else_count": 10,
        "for_count": 0,
        "while_count": 0,
        "total_control_statements": 20,
        "serialized_code_tokens": "Line 1: sx, sy, tx, ty = map(int, input().split())\nLine 2: diff_x = tx-sx\nLine 3: diff_y = ty-sy\nLine 4: ans = ''\nLine 5: ans += 'U'*abs(diff_y) if diff_x>0 else 'D'*abs(diff_y) \nLine 6: ans += 'R'*abs(diff_x+1) if diff_x>0 else 'L'*abs(diff_x+1) \nLine 7: ans += 'U'*(abs(diff_y)+1) if diff_x<0 else 'D'*(abs(diff_y)+1) \nLine 8: ans += 'R'*abs(diff_x+1) if diff_x<0 else 'L'*abs(diff_x+1) \nLine 9: ans += 'U' if diff_x>0 else 'D' \nLine 10: ans += 'R' if diff_x<0 else 'L' \nLine 11: ans += 'U'*abs(diff_y+1) if diff_x>0 else 'D'*abs(diff_y+1) \nLine 12: ans += 'R'*abs(diff_x+1) if diff_x>0 else 'L'*abs(diff_x+1) \nLine 13: ans += 'U'*(abs(diff_y)+1) if diff_x<0 else 'D'*(abs(diff_y)+1) \nLine 14: ans += 'R'*abs(diff_x) if diff_x<0 else 'L'*abs(diff_x) \nLine 15: print(ans)",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n"
        ],
        "test_cases": {
            "1": "0 0 1 1",
            "2": "1 1 0 0",
            "3": "0 0 0 1",
            "4": "0 0 1 0",
            "5": "1 0 0 0",
            "6": "0 0 0 0"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "5": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1
            ],
            "6": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03054",
        "code_tokens": "h,w,n=map(int,input().split())\nsr,sc=map(int,input().split())\ns=input()[::-1]\nt=input()[::-1]\nl,r,u,d=0,w+1,0,h+1\nfor i in range(n):\n si,ti=s[i],t[i]\n if l+1>=r or u+1>=d:break\n r=min(w+1,r+1)if ti==\"L\"else r\n l=max(0,l-1)if ti==\"R\"else l\n d=min(h+1,d+1)if ti==\"U\"else d\n u=max(0,u-1)if ti==\"D\"else u\n r-=1 if si==\"R\"else 0\n l+=1 if si==\"L\"else 0\n d-=1 if si==\"D\"else 0\n u+=1 if si==\"U\"else 0\nprint(\"YES\"if l<sc<r and u<sr<d else\"NO\")",
        "submission_id": "s823097721",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 17,
        "if_count": 10,
        "elif_count": 0,
        "else_count": 9,
        "for_count": 1,
        "while_count": 0,
        "total_control_statements": 20,
        "serialized_code_tokens": "Line 1: h,w,n=map(int,input().split())\nLine 2: sr,sc=map(int,input().split())\nLine 3: s=input()[::-1]\nLine 4: t=input()[::-1]\nLine 5: l,r,u,d=0,w+1,0,h+1\nLine 6: for i in range(n):\nLine 7:  si,ti=s[i],t[i]\nLine 8:  if l+1>=r or u+1>=d:break\nLine 9:  r=min(w+1,r+1)if ti==\"L\"else r\nLine 10:  l=max(0,l-1)if ti==\"R\"else l\nLine 11:  d=min(h+1,d+1)if ti==\"U\"else d\nLine 12:  u=max(0,u-1)if ti==\"D\"else u\nLine 13:  r-=1 if si==\"R\"else 0\nLine 14:  l+=1 if si==\"L\"else 0\nLine 15:  d-=1 if si==\"D\"else 0\nLine 16:  u+=1 if si==\"U\"else 0\nLine 17: print(\"YES\"if l<sc<r and u<sr<d else\"NO\")",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 17\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 17\n"
        ],
        "test_cases": {
            "1": "3 3 5\n2 2\nLLLUU\nRURDD",
            "2": "2 2 3\n1 1\nLL\nDD",
            "3": "4 4 7\n2 3\nLLRLRLR\nUDDUDDU",
            "4": "1 1 2\n1 1\nRR\nUU",
            "5": "3 3 4\n1 1\nLLRR\nUUDU"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "5": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p02756",
        "code_tokens": "from sys import stdin\nfrom collections import deque\nd=deque(list(stdin.readline().strip()))\nN=list(map(int,stdin.readline().strip().split()))[0]\nrev=False\nfor i in range(N):\n    Q = list(stdin.readline().strip().split())\n    if Q[0]=='1' :\n        if rev==False:\n            rev=True\n        else:\n            rev=False\n    if Q[0]=='2':\n        if Q[1]=='1':\n            if rev==False:\n                d.appendleft(Q[2])\n            else:\n                d.append(Q[2])\n        if Q[1]=='2':\n            if rev == False:\n                d.append(Q[2])\n            else:\n                d.appendleft(Q[2])\nif rev==False:\n    [print(d.popleft(),end=\"\") for x in range(len(d))]\nelse:\n    [print(d.pop(),end=\"\") for x in range(len(d))]",
        "submission_id": "s764249614",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 23,
        "if_count": 9,
        "elif_count": 0,
        "else_count": 5,
        "for_count": 5,
        "while_count": 0,
        "total_control_statements": 19,
        "serialized_code_tokens": "Line 1: from sys import stdin\nLine 2: from collections import deque\nLine 3: d=deque(list(stdin.readline().strip()))\nLine 4: N=list(map(int,stdin.readline().strip().split()))[0]\nLine 5: rev=False\nLine 6: for i in range(N):\nLine 7:     Q = list(stdin.readline().strip().split())\nLine 8:     if Q[0]=='1' :\nLine 9:         if rev==False:\nLine 10:             rev=True\nLine 11:         else:\nLine 12:             rev=False\nLine 13:     if Q[0]=='2':\nLine 14:         if Q[1]=='1':\nLine 15:             if rev==False:\nLine 16:                 d.appendleft(Q[2])\nLine 17:             else:\nLine 18:                 d.append(Q[2])\nLine 19:         if Q[1]=='2':\nLine 20:             if rev == False:\nLine 21:                 d.append(Q[2])\nLine 22:             else:\nLine 23:                 d.appendleft(Q[2])\nLine 24: if rev==False:\nLine 25:     [print(d.popleft(),end=\"\") for x in range(len(d))]\nLine 26: else:\nLine 27:     [print(d.pop(),end=\"\") for x in range(len(d))]",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 19, 20, 21, 24, 25\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 19, 20, 21, 24, 27\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 19, 20, 23, 24, 25\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 19, 20, 23, 24, 27\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 19, 24, 25\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 19, 24, 27\n",
            "7. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 18, 19, 20, 21, 24, 25\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 18, 19, 20, 21, 24, 27\n",
            "9. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 18, 19, 20, 23, 24, 25\n",
            "10. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 18, 19, 20, 23, 24, 27\n",
            "11. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 18, 19, 24, 25\n",
            "12. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 18, 19, 24, 27\n",
            "13. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 19, 20, 21, 24, 25\n",
            "14. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 19, 20, 21, 24, 27\n",
            "15. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 19, 20, 23, 24, 25\n",
            "16. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 19, 20, 23, 24, 27\n",
            "17. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 19, 24, 25\n",
            "18. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 19, 24, 27\n",
            "19. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 24, 25\n",
            "20. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 24, 27\n",
            "21. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 19, 20, 21, 24, 25\n",
            "22. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 19, 20, 21, 24, 27\n",
            "23. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 19, 20, 23, 24, 25\n",
            "24. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 19, 20, 23, 24, 27\n",
            "25. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 19, 24, 25\n",
            "26. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 19, 24, 27\n",
            "27. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 18, 19, 20, 21, 24, 25\n",
            "28. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 18, 19, 20, 21, 24, 27\n",
            "29. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 18, 19, 20, 23, 24, 25\n",
            "30. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 18, 19, 20, 23, 24, 27\n",
            "31. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 18, 19, 24, 25\n",
            "32. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 18, 19, 24, 27\n",
            "33. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 19, 20, 21, 24, 25\n",
            "34. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 19, 20, 21, 24, 27\n",
            "35. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 19, 20, 23, 24, 25\n",
            "36. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 19, 20, 23, 24, 27\n",
            "37. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 19, 24, 25\n",
            "38. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 19, 24, 27\n",
            "39. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 24, 25\n",
            "40. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 24, 27\n",
            "41. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 15, 16, 19, 20, 21, 24, 25\n",
            "42. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 15, 16, 19, 20, 21, 24, 27\n",
            "43. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 15, 16, 19, 20, 23, 24, 25\n",
            "44. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 15, 16, 19, 20, 23, 24, 27\n",
            "45. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 15, 16, 19, 24, 25\n",
            "46. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 15, 16, 19, 24, 27\n",
            "47. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 15, 18, 19, 20, 21, 24, 25\n",
            "48. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 15, 18, 19, 20, 21, 24, 27\n",
            "49. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 15, 18, 19, 20, 23, 24, 25\n",
            "50. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 15, 18, 19, 20, 23, 24, 27\n",
            "51. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 15, 18, 19, 24, 25\n",
            "52. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 15, 18, 19, 24, 27\n",
            "53. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 19, 20, 21, 24, 25\n",
            "54. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 19, 20, 21, 24, 27\n",
            "55. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 19, 20, 23, 24, 25\n",
            "56. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 19, 20, 23, 24, 27\n",
            "57. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 19, 24, 25\n",
            "58. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 19, 24, 27\n",
            "59. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 24, 25\n",
            "60. Lines 1, 2, 3, 4, 5, 6, 7, 8, 13, 24, 27\n",
            "61. Lines 1, 2, 3, 4, 5, 6, 24, 25\n",
            "62. Lines 1, 2, 3, 4, 5, 6, 24, 27\n"
        ],
        "test_cases": {
            "1": "0\n0\n0",
            "2": "1\n1\n1",
            "3": "1\n0\n2 1 0",
            "4": "1\n1\n2 2 0",
            "5": "1\n1\n1 1 0",
            "6": "2\n1\n2 1 0",
            "7": "2\n1\n2 2 0",
            "8": "2\n1\n1 1 0",
            "9": "2\n1\n2 1 0\n2 1 1",
            "10": "2\n2\n2 1 0\n2 2 1\n",
            "11": "2\n1\n2 2 0\n2 1 1",
            "12": "3\n1\n1 1 0\n1\n2 2 1"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                0
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                1,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                0
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0
            ],
            "5": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                1,
                1
            ],
            "6": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                0
            ],
            "7": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0
            ],
            "8": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                1,
                1
            ],
            "9": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                0
            ],
            "10": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0
            ],
            "11": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0
            ],
            "12": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                1,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p02761",
        "code_tokens": "n,m= map(int,input().split())\nnd = {i:set() for i in range(1,n+1)}\nns = [0]*n\nif m==0:\n    if n==1:print(0)\n    else:\n        ns[0]=1\n        print(''.join([str(t) for t in ns]))\nelse:\n    for i in range(m):\n        s,c= map(int,input().split())\n        nd[s].add(c)\n    for i in range(1,n+1):\n        if   len(nd[i])==0:ns[i-1] = 1 if i==1 else 0\n        elif len(nd[i])==1:ns[i-1] = list(nd[i])[0]\n        else:\n            print(-1)\n            break\n    else:\n        if ns[0]==0:\n            if n==1:print(0)\n            else:print(-1)\n        else:print(''.join([str(t) for t in ns]))",
        "submission_id": "s952040787",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 23,
        "if_count": 6,
        "elif_count": 1,
        "else_count": 7,
        "for_count": 5,
        "while_count": 0,
        "total_control_statements": 19,
        "serialized_code_tokens": "Line 1: n,m= map(int,input().split())\nLine 2: nd = {i:set() for i in range(1,n+1)}\nLine 3: ns = [0]*n\nLine 4: if m==0:\nLine 5:     if n==1:print(0)\nLine 6:     else:\nLine 7:         ns[0]=1\nLine 8:         print(''.join([str(t) for t in ns]))\nLine 9: else:\nLine 10:     for i in range(m):\nLine 11:         s,c= map(int,input().split())\nLine 12:         nd[s].add(c)\nLine 13:     for i in range(1,n+1):\nLine 14:         if   len(nd[i])==0:ns[i-1] = 1 if i==1 else 0\nLine 15:         elif len(nd[i])==1:ns[i-1] = list(nd[i])[0]\nLine 16:         else:\nLine 17:             print(-1)\nLine 18:             break\nLine 19:     else:\nLine 20:         if ns[0]==0:\nLine 21:             if n==1:print(0)\nLine 22:             else:print(-1)\nLine 23:         else:print(''.join([str(t) for t in ns]))",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5\n",
            "2. Lines 1, 2, 3, 4, 10, 11, 12, 13, 14, 20, 21\n",
            "3. Lines 1, 2, 3, 4, 10, 11, 12, 13, 14, 20, 23\n",
            "4. Lines 1, 2, 3, 4, 10, 11, 12, 13, 20, 21\n",
            "5. Lines 1, 2, 3, 4, 10, 11, 12, 13, 20, 23\n",
            "6. Lines 1, 2, 3, 4, 10, 13, 14, 20, 21\n",
            "7. Lines 1, 2, 3, 4, 10, 13, 14, 20, 23\n",
            "8. Lines 1, 2, 3, 4, 10, 13, 20, 21\n",
            "9. Lines 1, 2, 3, 4, 10, 13, 20, 23\n"
        ],
        "test_cases": {
            "1": "1 0",
            "2": "1 1\n1 1",
            "3": "2 1\n1 2",
            "4": "3 2\n1 2\n1 3",
            "5": "4 3\n1 2\n1 3\n2 4",
            "6": "2 2\n1 2\n2 1",
            "7": "2 2\n1 2\n2 2",
            "8": "3 2\n1 2\n1 3",
            "9": "3 2\n1 2\n2 1",
            "10": "3 2\n1 2\n3 2",
            "11": "3 2\n1 2\n1 2",
            "12": "3 1\n1 2",
            "13": "3 1\n1 1"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                0,
                0,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                0,
                0,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0
            ],
            "5": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0
            ],
            "6": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                0,
                0,
                1
            ],
            "7": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                0,
                0,
                1
            ],
            "8": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0
            ],
            "9": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                0,
                0,
                1
            ],
            "10": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                0,
                0,
                1
            ],
            "11": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                0,
                0,
                1
            ],
            "12": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                0,
                0,
                1
            ],
            "13": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                0,
                0,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p02882",
        "code_tokens": "import sys\nsys.setrecursionlimit(2147483647)\nINF=float(\"inf\")\nMOD=10**9+7\ninput=lambda :sys.stdin.readline().rstrip()\ndef bisection(l,r,f,left=True,discrete=True):\n    if discrete:\n        eps=1 \n    else:\n        eps=10**-12\n    if((not left)^f(r)): \n        if left:\n            return r\n        else:\n            return r+1\n    elif(left^f(l)):\n        if left:\n            return l-1 \n        else:\n            return l\n    while(r-l>eps):\n        if discrete:\n            h = (l+r)//2\n        else:\n            h = (l+r)/2\n        if((not left)^f(h)): \n            l=h\n        else: \n            r=h\n    if not discrete:\n        return (l + r) / 2\n    else:\n        if left:\n            return l\n        else:\n            return r\ndef resolve():\n    from math import tan,pi\n    a,b,x=map(int,input().split())\n    def check(t):\n        if(2*x<=a*a*b):\n            return 2*x*tan(t)<=a*b*b\n        else:\n            return 2*x<=a*a*(2*b-a*tan(t))\n    print(bisection(0,pi/2-10**-6,check,left=True,discrete=False)*180/pi)\nresolve()",
        "submission_id": "s101420183",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 25,
        "if_count": 9,
        "elif_count": 1,
        "else_count": 8,
        "for_count": 0,
        "while_count": 1,
        "total_control_statements": 19,
        "serialized_code_tokens": "Line 1: import sys\nLine 2: sys.setrecursionlimit(2147483647)\nLine 3: INF=float(\"inf\")\nLine 4: MOD=10**9+7\nLine 5: input=lambda :sys.stdin.readline().rstrip()\nLine 6: def bisection(l,r,f,left=True,discrete=True):\nLine 7:     if discrete:\nLine 8:         eps=1 \nLine 9:     else:\nLine 10:         eps=10**-12\nLine 11:     if((not left)^f(r)): \nLine 12:         if left:\nLine 13:             return r\nLine 14:         else:\nLine 15:             return r+1\nLine 16:     elif(left^f(l)):\nLine 17:         if left:\nLine 18:             return l-1 \nLine 19:         else:\nLine 20:             return l\nLine 21:     while(r-l>eps):\nLine 22:         if discrete:\nLine 23:             h = (l+r)//2\nLine 24:         else:\nLine 25:             h = (l+r)/2\nLine 26:         if((not left)^f(h)): \nLine 27:             l=h\nLine 28:         else: \nLine 29:             r=h\nLine 30:     if not discrete:\nLine 31:         return (l + r) / 2\nLine 32:     else:\nLine 33:         if left:\nLine 34:             return l\nLine 35:         else:\nLine 36:             return r\nLine 37: def resolve():\nLine 38:     from math import tan,pi\nLine 39:     a,b,x=map(int,input().split())\nLine 40:     def check(t):\nLine 41:         if(2*x<=a*a*b):\nLine 42:             return 2*x*tan(t)<=a*b*b\nLine 43:         else:\nLine 44:             return 2*x<=a*a*(2*b-a*tan(t))\nLine 45:     print(bisection(0,pi/2-10**-6,check,left=True,discrete=False)*180/pi)\nLine 46: resolve()",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 37, 38, 39, 40, 45, 46\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 15, 37, 38, 39, 40, 45, 46\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 17, 18, 37, 38, 39, 40, 45, 46\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 17, 20, 37, 38, 39, 40, 45, 46\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 22, 23, 26, 27, 30, 33, 34, 37, 38, 39, 40, 45, 46\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 22, 23, 26, 27, 30, 33, 36, 37, 38, 39, 40, 45, 46\n",
            "7. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 22, 23, 26, 27, 30, 31, 37, 38, 39, 40, 45, 46\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 22, 23, 26, 29, 30, 33, 34, 37, 38, 39, 40, 45, 46\n",
            "9. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 22, 23, 26, 29, 30, 33, 36, 37, 38, 39, 40, 45, 46\n",
            "10. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 22, 23, 26, 29, 30, 31, 37, 38, 39, 40, 45, 46\n",
            "11. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 22, 25, 26, 27, 30, 33, 34, 37, 38, 39, 40, 45, 46\n",
            "12. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 22, 25, 26, 27, 30, 33, 36, 37, 38, 39, 40, 45, 46\n",
            "13. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 22, 25, 26, 27, 30, 31, 37, 38, 39, 40, 45, 46\n",
            "14. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 22, 25, 26, 29, 30, 33, 34, 37, 38, 39, 40, 45, 46\n",
            "15. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 22, 25, 26, 29, 30, 33, 36, 37, 38, 39, 40, 45, 46\n",
            "16. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 22, 25, 26, 29, 30, 31, 37, 38, 39, 40, 45, 46\n",
            "17. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 30, 33, 34, 37, 38, 39, 40, 45, 46\n",
            "18. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 30, 33, 36, 37, 38, 39, 40, 45, 46\n",
            "19. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 30, 31, 37, 38, 39, 40, 45, 46\n",
            "20. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 37, 38, 39, 40, 45, 46\n",
            "21. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 15, 37, 38, 39, 40, 45, 46\n",
            "22. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 17, 18, 37, 38, 39, 40, 45, 46\n",
            "23. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 17, 20, 37, 38, 39, 40, 45, 46\n",
            "24. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 22, 23, 26, 27, 30, 33, 34, 37, 38, 39, 40, 45, 46\n",
            "25. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 22, 23, 26, 27, 30, 33, 36, 37, 38, 39, 40, 45, 46\n",
            "26. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 22, 23, 26, 27, 30, 31, 37, 38, 39, 40, 45, 46\n",
            "27. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 22, 23, 26, 29, 30, 33, 34, 37, 38, 39, 40, 45, 46\n",
            "28. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 22, 23, 26, 29, 30, 33, 36, 37, 38, 39, 40, 45, 46\n",
            "29. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 22, 23, 26, 29, 30, 31, 37, 38, 39, 40, 45, 46\n",
            "30. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 22, 25, 26, 27, 30, 33, 34, 37, 38, 39, 40, 45, 46\n",
            "31. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 22, 25, 26, 27, 30, 33, 36, 37, 38, 39, 40, 45, 46\n",
            "32. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 22, 25, 26, 27, 30, 31, 37, 38, 39, 40, 45, 46\n",
            "33. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 22, 25, 26, 29, 30, 33, 34, 37, 38, 39, 40, 45, 46\n",
            "34. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 22, 25, 26, 29, 30, 33, 36, 37, 38, 39, 40, 45, 46\n",
            "35. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 22, 25, 26, 29, 30, 31, 37, 38, 39, 40, 45, 46\n",
            "36. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 30, 33, 34, 37, 38, 39, 40, 45, 46\n",
            "37. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 30, 33, 36, 37, 38, 39, 40, 45, 46\n",
            "38. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 30, 31, 37, 38, 39, 40, 45, 46\n"
        ],
        "test_cases": {
            "1": "1 1 1",
            "2": "3 2 3",
            "3": "10 5 50",
            "4": "5 10 50",
            "5": "2 2 1",
            "6": "1 10 50",
            "7": "10 1 50"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1
            ],
            "5": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1
            ],
            "6": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1
            ],
            "7": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03330",
        "code_tokens": "N,C = [int(i) for i in input().split()]\nD = [[int(j) for j in input().split()] for i in range(C)]\nc_temp = [[int(j)-1 for j in input().split()] for i in range(N)]\nc = [[0 for i in range(C)] for j in range(3)]\nfor i in range(N):\n    for j in range(N):\n        c[(i+j)%3][c_temp[i][j]] += 1\nmin = 10**15\nfor i in [ii for ii in range(C)]:\n    for j in [jj for jj in range(C) if jj != i]:\n        for k in [kk for kk in range(C) if kk != i and kk != j]:\n            count = sum([D[x][i]*c[0][x] + D[x][j]*c[1][x] + D[x][k]*c[2][x] for x in range(C)])\n            if min > count:\n                min = count\nprint(min)",
        "submission_id": "s768806410",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 16,
        "if_count": 3,
        "elif_count": 0,
        "else_count": 0,
        "for_count": 16,
        "while_count": 0,
        "total_control_statements": 19,
        "serialized_code_tokens": "Line 1: N,C = [int(i) for i in input().split()]\nLine 2: D = [[int(j) for j in input().split()] for i in range(C)]\nLine 3: c_temp = [[int(j)-1 for j in input().split()] for i in range(N)]\nLine 4: c = [[0 for i in range(C)] for j in range(3)]\nLine 5: for i in range(N):\nLine 6:     for j in range(N):\nLine 7:         c[(i+j)%3][c_temp[i][j]] += 1\nLine 8: min = 10**15\nLine 9: for i in [ii for ii in range(C)]:\nLine 10:     for j in [jj for jj in range(C) if jj != i]:\nLine 11:         for k in [kk for kk in range(C) if kk != i and kk != j]:\nLine 12:             count = sum([D[x][i]*c[0][x] + D[x][j]*c[1][x] + D[x][k]*c[2][x] for x in range(C)])\nLine 13:             if min > count:\nLine 14:                 min = count\nLine 15: print(min)",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 15\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15\n",
            "7. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 15\n",
            "9. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 15\n",
            "10. Lines 1, 2, 3, 4, 5, 6, 8, 9, 15\n",
            "11. Lines 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15\n",
            "12. Lines 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 15\n",
            "13. Lines 1, 2, 3, 4, 5, 8, 9, 10, 11, 15\n",
            "14. Lines 1, 2, 3, 4, 5, 8, 9, 10, 15\n",
            "15. Lines 1, 2, 3, 4, 5, 8, 9, 15\n"
        ],
        "test_cases": {
            "1": "3 3\n1 2 3\n4 5 6\n7 8 9\n1 2 3\n4 5 6\n7 8 9\n1 2 3\n4 5 6",
            "2": "3 3\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1",
            "3": "2 2\n1 2\n3 4\n1 2\n3 4",
            "4": "4 3\n1 2 3\n4 5 6\n7 8 9\n10 11 12\n1 2 3\n4 5 6\n7 8 9\n10 11 12",
            "5": "2 2\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "5": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p02883",
        "code_tokens": "import sys\nsys.setrecursionlimit(2147483647)\nINF=float(\"inf\")\nMOD=10**9+7\ninput=lambda :sys.stdin.readline().rstrip()\ndef bisection(l,r,f,left=True,discrete=True):\n    if discrete:\n        eps=1 \n    else:\n        eps=10**-12\n    if((not left)^f(r)): \n        if left:\n            return r\n        else:\n            return r+1\n    elif(left^f(l)):\n        if left:\n            return l-1 \n        else:\n            return l\n    while(r-l>eps):\n        if discrete:\n            h = (l+r)//2\n        else:\n            h = (l+r)/2\n        if((not left)^f(h)): \n            l=h\n        else: \n            r=h\n    if not discrete:\n        return (l + r) / 2\n    else:\n        if left:\n            return l\n        else:\n            return r\ndef resolve():\n    n,k=map(int,input().split())\n    A=sorted(map(int,input().split()))\n    F=sorted(map(int,input().split()),reverse=1)\n    def check(x):\n        res=0\n        for a,f in zip(A,F):\n            if(a*f)<=x: \n                continue\n            res+=a-int(x/f)\n        return res<=k\n    print(bisection(0,10**12,check,left=False))\nresolve()",
        "submission_id": "s510877789",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 27,
        "if_count": 9,
        "elif_count": 1,
        "else_count": 7,
        "for_count": 1,
        "while_count": 1,
        "total_control_statements": 19,
        "serialized_code_tokens": "Line 1: import sys\nLine 2: sys.setrecursionlimit(2147483647)\nLine 3: INF=float(\"inf\")\nLine 4: MOD=10**9+7\nLine 5: input=lambda :sys.stdin.readline().rstrip()\nLine 6: def bisection(l,r,f,left=True,discrete=True):\nLine 7:     if discrete:\nLine 8:         eps=1 \nLine 9:     else:\nLine 10:         eps=10**-12\nLine 11:     if((not left)^f(r)): \nLine 12:         if left:\nLine 13:             return r\nLine 14:         else:\nLine 15:             return r+1\nLine 16:     elif(left^f(l)):\nLine 17:         if left:\nLine 18:             return l-1 \nLine 19:         else:\nLine 20:             return l\nLine 21:     while(r-l>eps):\nLine 22:         if discrete:\nLine 23:             h = (l+r)//2\nLine 24:         else:\nLine 25:             h = (l+r)/2\nLine 26:         if((not left)^f(h)): \nLine 27:             l=h\nLine 28:         else: \nLine 29:             r=h\nLine 30:     if not discrete:\nLine 31:         return (l + r) / 2\nLine 32:     else:\nLine 33:         if left:\nLine 34:             return l\nLine 35:         else:\nLine 36:             return r\nLine 37: def resolve():\nLine 38:     n,k=map(int,input().split())\nLine 39:     A=sorted(map(int,input().split()))\nLine 40:     F=sorted(map(int,input().split()),reverse=1)\nLine 41:     def check(x):\nLine 42:         res=0\nLine 43:         for a,f in zip(A,F):\nLine 44:             if(a*f)<=x: \nLine 45:                 continue\nLine 46:             res+=a-int(x/f)\nLine 47:         return res<=k\nLine 48:     print(bisection(0,10**12,check,left=False))\nLine 49: resolve()",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 37, 38, 39, 40, 41, 48, 49\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 15, 37, 38, 39, 40, 41, 48, 49\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 17, 18, 37, 38, 39, 40, 41, 48, 49\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 17, 20, 37, 38, 39, 40, 41, 48, 49\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 22, 23, 26, 27, 30, 33, 34, 37, 38, 39, 40, 41, 48, 49\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 22, 23, 26, 27, 30, 33, 36, 37, 38, 39, 40, 41, 48, 49\n",
            "7. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 22, 23, 26, 27, 30, 31, 37, 38, 39, 40, 41, 48, 49\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 22, 23, 26, 29, 30, 33, 34, 37, 38, 39, 40, 41, 48, 49\n",
            "9. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 22, 23, 26, 29, 30, 33, 36, 37, 38, 39, 40, 41, 48, 49\n",
            "10. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 22, 23, 26, 29, 30, 31, 37, 38, 39, 40, 41, 48, 49\n",
            "11. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 22, 25, 26, 27, 30, 33, 34, 37, 38, 39, 40, 41, 48, 49\n",
            "12. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 22, 25, 26, 27, 30, 33, 36, 37, 38, 39, 40, 41, 48, 49\n",
            "13. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 22, 25, 26, 27, 30, 31, 37, 38, 39, 40, 41, 48, 49\n",
            "14. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 22, 25, 26, 29, 30, 33, 34, 37, 38, 39, 40, 41, 48, 49\n",
            "15. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 22, 25, 26, 29, 30, 33, 36, 37, 38, 39, 40, 41, 48, 49\n",
            "16. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 22, 25, 26, 29, 30, 31, 37, 38, 39, 40, 41, 48, 49\n",
            "17. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 30, 33, 34, 37, 38, 39, 40, 41, 48, 49\n",
            "18. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 30, 33, 36, 37, 38, 39, 40, 41, 48, 49\n",
            "19. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 21, 30, 31, 37, 38, 39, 40, 41, 48, 49\n",
            "20. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 37, 38, 39, 40, 41, 48, 49\n",
            "21. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 15, 37, 38, 39, 40, 41, 48, 49\n",
            "22. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 17, 18, 37, 38, 39, 40, 41, 48, 49\n",
            "23. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 17, 20, 37, 38, 39, 40, 41, 48, 49\n",
            "24. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 22, 23, 26, 27, 30, 33, 34, 37, 38, 39, 40, 41, 48, 49\n",
            "25. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 22, 23, 26, 27, 30, 33, 36, 37, 38, 39, 40, 41, 48, 49\n",
            "26. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 22, 23, 26, 27, 30, 31, 37, 38, 39, 40, 41, 48, 49\n",
            "27. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 22, 23, 26, 29, 30, 33, 34, 37, 38, 39, 40, 41, 48, 49\n",
            "28. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 22, 23, 26, 29, 30, 33, 36, 37, 38, 39, 40, 41, 48, 49\n",
            "29. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 22, 23, 26, 29, 30, 31, 37, 38, 39, 40, 41, 48, 49\n",
            "30. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 22, 25, 26, 27, 30, 33, 34, 37, 38, 39, 40, 41, 48, 49\n",
            "31. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 22, 25, 26, 27, 30, 33, 36, 37, 38, 39, 40, 41, 48, 49\n",
            "32. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 22, 25, 26, 27, 30, 31, 37, 38, 39, 40, 41, 48, 49\n",
            "33. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 22, 25, 26, 29, 30, 33, 34, 37, 38, 39, 40, 41, 48, 49\n",
            "34. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 22, 25, 26, 29, 30, 33, 36, 37, 38, 39, 40, 41, 48, 49\n",
            "35. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 22, 25, 26, 29, 30, 31, 37, 38, 39, 40, 41, 48, 49\n",
            "36. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 30, 33, 34, 37, 38, 39, 40, 41, 48, 49\n",
            "37. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 30, 33, 36, 37, 38, 39, 40, 41, 48, 49\n",
            "38. Lines 1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 21, 30, 31, 37, 38, 39, 40, 41, 48, 49\n"
        ],
        "test_cases": {
            "1": "3 1\n1 2 3\n4 5 6",
            "2": "4 2\n1 2 3 4\n1 2 3 4",
            "3": "5 3\n1 2 3 4 5\n1 2 3 4 5",
            "4": "3 1\n10 20 30\n1 2 3",
            "5": "3 1\n10 20 30\n3 2 1"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "5": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03959",
        "code_tokens": "n = int(input())\nt = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nx,flag,ans,mod = [[t[0],t[0]]]+[[1,1] for _ in range(n-1)],True,1,10**9+7\nif max(t)!=max(a):\n    flag = False\nfor i in range(1,n):\n    if t[i-1]<t[i]:\n        x[i] = [t[i],t[i]]\n    else:\n        x[i][0] = t[i]\nif x[-1][0]<a[-1]:\n    flag = False\nelse:\n    x[-1] = [a[-1],a[-1]]\n    for i in range(n-2,0,-1):\n        if a[i]>a[i+1]:\n            if x[i][0]>=a[i]: \n                x[i]=[a[i],a[i]]\n            else: \n                flag = False\n        else:\n            if x[i][0]>=a[i]:\n                x[i][0]=a[i]\n            else:\n                pass\nif flag:\n    for i,j in x: ans = (ans*(i-j+1))%mod\nelse: \n    ans = 0\nprint(ans)",
        "submission_id": "s176619108",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 22,
        "if_count": 7,
        "elif_count": 0,
        "else_count": 6,
        "for_count": 6,
        "while_count": 0,
        "total_control_statements": 19,
        "serialized_code_tokens": "Line 1: n = int(input())\nLine 2: t = [int(i) for i in input().split()]\nLine 3: a = [int(i) for i in input().split()]\nLine 4: x,flag,ans,mod = [[t[0],t[0]]]+[[1,1] for _ in range(n-1)],True,1,10**9+7\nLine 5: if max(t)!=max(a):\nLine 6:     flag = False\nLine 7: for i in range(1,n):\nLine 8:     if t[i-1]<t[i]:\nLine 9:         x[i] = [t[i],t[i]]\nLine 10:     else:\nLine 11:         x[i][0] = t[i]\nLine 12: if x[-1][0]<a[-1]:\nLine 13:     flag = False\nLine 14: else:\nLine 15:     x[-1] = [a[-1],a[-1]]\nLine 16:     for i in range(n-2,0,-1):\nLine 17:         if a[i]>a[i+1]:\nLine 18:             if x[i][0]>=a[i]: \nLine 19:                 x[i]=[a[i],a[i]]\nLine 20:             else: \nLine 21:                 flag = False\nLine 22:         else:\nLine 23:             if x[i][0]>=a[i]:\nLine 24:                 x[i][0]=a[i]\nLine 25:             else:\nLine 26:                 pass\nLine 27: if flag:\nLine 28:     for i,j in x: ans = (ans*(i-j+1))%mod\nLine 29: else: \nLine 30:     ans = 0\nLine 31: print(ans)",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 27, 30, 31\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 15, 16, 17, 18, 19, 27, 30, 31\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 15, 16, 17, 18, 21, 27, 30, 31\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 15, 16, 17, 23, 24, 27, 30, 31\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 15, 16, 17, 23, 27, 30, 31\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 15, 16, 27, 30, 31\n",
            "7. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 27, 30, 31\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 15, 16, 17, 18, 19, 27, 30, 31\n",
            "9. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 15, 16, 17, 18, 21, 27, 30, 31\n",
            "10. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 15, 16, 17, 23, 24, 27, 30, 31\n",
            "11. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 15, 16, 17, 23, 27, 30, 31\n",
            "12. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 15, 16, 27, 30, 31\n",
            "13. Lines 1, 2, 3, 4, 5, 6, 7, 12, 13, 27, 30, 31\n",
            "14. Lines 1, 2, 3, 4, 5, 6, 7, 12, 15, 16, 17, 18, 19, 27, 30, 31\n",
            "15. Lines 1, 2, 3, 4, 5, 6, 7, 12, 15, 16, 17, 18, 21, 27, 30, 31\n",
            "16. Lines 1, 2, 3, 4, 5, 6, 7, 12, 15, 16, 17, 23, 24, 27, 30, 31\n",
            "17. Lines 1, 2, 3, 4, 5, 6, 7, 12, 15, 16, 17, 23, 27, 30, 31\n",
            "18. Lines 1, 2, 3, 4, 5, 6, 7, 12, 15, 16, 27, 30, 31\n",
            "19. Lines 1, 2, 3, 4, 5, 7, 8, 9, 12, 13, 27, 30, 31\n",
            "20. Lines 1, 2, 3, 4, 5, 7, 8, 9, 12, 15, 16, 17, 18, 19, 27, 30, 31\n",
            "21. Lines 1, 2, 3, 4, 5, 7, 8, 9, 12, 15, 16, 17, 18, 21, 27, 30, 31\n",
            "22. Lines 1, 2, 3, 4, 5, 7, 8, 9, 12, 15, 16, 17, 23, 24, 27, 30, 31\n",
            "23. Lines 1, 2, 3, 4, 5, 7, 8, 9, 12, 15, 16, 17, 23, 27, 30, 31\n",
            "24. Lines 1, 2, 3, 4, 5, 7, 8, 9, 12, 15, 16, 27, 30, 31\n",
            "25. Lines 1, 2, 3, 4, 5, 7, 8, 11, 12, 13, 27, 30, 31\n",
            "26. Lines 1, 2, 3, 4, 5, 7, 8, 11, 12, 15, 16, 17, 18, 19, 27, 30, 31\n",
            "27. Lines 1, 2, 3, 4, 5, 7, 8, 11, 12, 15, 16, 17, 18, 21, 27, 30, 31\n",
            "28. Lines 1, 2, 3, 4, 5, 7, 8, 11, 12, 15, 16, 17, 23, 24, 27, 30, 31\n",
            "29. Lines 1, 2, 3, 4, 5, 7, 8, 11, 12, 15, 16, 17, 23, 27, 30, 31\n",
            "30. Lines 1, 2, 3, 4, 5, 7, 8, 11, 12, 15, 16, 27, 30, 31\n",
            "31. Lines 1, 2, 3, 4, 5, 7, 12, 13, 27, 30, 31\n",
            "32. Lines 1, 2, 3, 4, 5, 7, 12, 15, 16, 17, 18, 19, 27, 30, 31\n",
            "33. Lines 1, 2, 3, 4, 5, 7, 12, 15, 16, 17, 18, 21, 27, 30, 31\n",
            "34. Lines 1, 2, 3, 4, 5, 7, 12, 15, 16, 17, 23, 24, 27, 30, 31\n",
            "35. Lines 1, 2, 3, 4, 5, 7, 12, 15, 16, 17, 23, 27, 30, 31\n",
            "36. Lines 1, 2, 3, 4, 5, 7, 12, 15, 16, 27, 30, 31\n"
        ],
        "test_cases": {
            "1": "3\n2 1 3\n3 1 2",
            "2": "4\n1 2 3 4\n4 3 2 1",
            "3": "5\n1 2 3 4 5\n5 4 3 2 1",
            "4": "3\n1 1 1\n1 1 1",
            "5": "5\n1 2 3 4 5\n5 4 3 2 1",
            "6": "3\n1 2 3\n3 2 1"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                0,
                1,
                1,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                0,
                1,
                1,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0,
                1
            ],
            "5": [
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                0,
                1,
                1,
                1
            ],
            "6": [
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                0,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03138",
        "code_tokens": "n, k, *a = map(int, open(0).read().split())\ncnt = [sum((x >> i) & 1 for x in a) for i in range(40)]\nbits = [0 if i > n - i else 1 for i in cnt]\nbase = format(k, 'b')\nl = len(base)\ntmp = []\nif sum(2 ** i for i, b in enumerate(bits[:l]) if b == 1) > k:\n    for i in range(l - 1, -1, -1):\n        if int(base[-i - 1]) < bits[i]:\n            bits[i] = 0\n            tmp.append(sum(2 ** j for j, b in enumerate(bits[:l]) if b == 1))\nelse:\n    tmp.append(sum(2 ** j for j, b in enumerate(bits[:l]) if b == 1))\nans = max(sum(i ^ x for x in a) for i in tmp if i <= k)\nprint(ans)",
        "submission_id": "s423919208",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 24,
        "if_count": 8,
        "elif_count": 0,
        "else_count": 2,
        "for_count": 9,
        "while_count": 0,
        "total_control_statements": 19,
        "serialized_code_tokens": "Line 1: n, k, *a = map(int, open(0).read().split())\nLine 2: cnt = [sum((x >> i) & 1 for x in a) for i in range(40)]\nLine 3: bits = [0 if i > n - i else 1 for i in cnt]\nLine 4: base = format(k, 'b')\nLine 5: l = len(base)\nLine 6: tmp = []\nLine 7: if sum(2 ** i for i, b in enumerate(bits[:l]) if b == 1) > k:\nLine 8:     for i in range(l - 1, -1, -1):\nLine 9:         if int(base[-i - 1]) < bits[i]:\nLine 10:             bits[i] = 0\nLine 11:             tmp.append(sum(2 ** j for j, b in enumerate(bits[:l]) if b == 1))\nLine 12: else:\nLine 13:     tmp.append(sum(2 ** j for j, b in enumerate(bits[:l]) if b == 1))\nLine 14: ans = max(sum(i ^ x for x in a) for i in tmp if i <= k)\nLine 15: print(ans)",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 14, 15\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 13, 14, 15\n"
        ],
        "test_cases": {
            "1": "0 0 1",
            "2": "1 1 1",
            "3": "5 5 1 2 3 4 5",
            "4": "1 1 0",
            "5": "3 3 1 2 3",
            "6": "4 1000 100 200 300 400",
            "7": "5 10 8 4 2 1 16",
            "8": "5 5 5 5 5 5 5",
            "9": "3 5 6 7 8",
            "10": "5 10 2 3 5 7 9"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "5": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "6": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1
            ],
            "7": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1
            ],
            "8": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "9": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "10": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03689",
        "code_tokens": "H, W, h, w = map(int, input().split())\nif H % h == 0 and W % w == 0:\n\tprint(\"No\")\nelif h == 1:\n\tprint(\"Yes\")\n\tcoef = 999999999 // (w-1)\n\tplus, minus = coef, -coef * (w-1) - 1\n\tfor _ in range(H):\n\t\tprint(*[minus if j%w == 0 else plus for j in range(1, W+1)])\nelif w == 1:\n\tprint(\"Yes\")\n\tcoef = 999999999 // (h-1)\n\tplus, minus = coef, -coef * (h-1) - 1\n\tfor i in range(1, H+1):\n\t\tprint(*[minus if i%h == 0 else plus for _ in range(W)])\nelse:\n\tprint(\"Yes\")\n\tcoef = min(999999999 // ((h-1) * (w-1)), 1000000000 // (h+w-1))\n\tplus, minus = coef * (h+w-1), -coef * (h-1) * (w-1) - 1\n\tfor i in range(1, H+1):\n\t\tif i%h != 0:\n\t\t\tprint(*[minus if j%w == 0 else plus for j in range(1, W+1)])\n\t\telse:\n\t\t\tprint(*[minus for _ in range(W)])",
        "submission_id": "s127244428",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 24,
        "if_count": 5,
        "elif_count": 2,
        "else_count": 5,
        "for_count": 7,
        "while_count": 0,
        "total_control_statements": 19,
        "serialized_code_tokens": "Line 1: H, W, h, w = map(int, input().split())\nLine 2: if H % h == 0 and W % w == 0:\nLine 3: \tprint(\"No\")\nLine 4: elif h == 1:\nLine 5: \tprint(\"Yes\")\nLine 6: \tcoef = 999999999 // (w-1)\nLine 7: \tplus, minus = coef, -coef * (w-1) - 1\nLine 8: \tfor _ in range(H):\nLine 9: \t\tprint(*[minus if j%w == 0 else plus for j in range(1, W+1)])\nLine 10: elif w == 1:\nLine 11: \tprint(\"Yes\")\nLine 12: \tcoef = 999999999 // (h-1)\nLine 13: \tplus, minus = coef, -coef * (h-1) - 1\nLine 14: \tfor i in range(1, H+1):\nLine 15: \t\tprint(*[minus if i%h == 0 else plus for _ in range(W)])\nLine 16: else:\nLine 17: \tprint(\"Yes\")\nLine 18: \tcoef = min(999999999 // ((h-1) * (w-1)), 1000000000 // (h+w-1))\nLine 19: \tplus, minus = coef * (h+w-1), -coef * (h-1) * (w-1) - 1\nLine 20: \tfor i in range(1, H+1):\nLine 21: \t\tif i%h != 0:\nLine 22: \t\t\tprint(*[minus if j%w == 0 else plus for j in range(1, W+1)])\nLine 23: \t\telse:\nLine 24: \t\t\tprint(*[minus for _ in range(W)])",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3\n",
            "2. Lines 1, 2, 4, 5, 6, 7, 8, 9\n",
            "3. Lines 1, 2, 4, 5, 6, 7, 8\n",
            "4. Lines 1, 2, 4, 10, 11, 12, 13, 14, 15\n",
            "5. Lines 1, 2, 4, 10, 11, 12, 13, 14\n",
            "6. Lines 1, 2, 4, 10, 17, 18, 19, 20, 21, 22\n",
            "7. Lines 1, 2, 4, 10, 17, 18, 19, 20, 21, 24\n",
            "8. Lines 1, 2, 4, 10, 17, 18, 19, 20\n"
        ],
        "test_cases": {
            "1": "4 6 2 3",
            "2": "5 8 5 1",
            "3": "3 3 1 1",
            "4": "10 15 3 4",
            "5": "7 12 2 4",
            "6": "10 10 5 5",
            "7": "1000000000 1000000000 1 1"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2": [
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "3": [
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "4": [
                1,
                1,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "5": [
                1,
                1,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "6": [
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "7": [
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p01125",
        "code_tokens": "while 1:\n    N=int(input())\n    if not N:break\n    cd={tuple(map(int,input().split())) for _ in range(N)}\n    c=set()\n    x,y=10,10\n    M=int(input())\n    for _ in range(M):\n        d,l=input().split()\n        l=int(l)\n        if d==\"N\":\n            sc={(x+i,y+j) for i in range(1) for j in range(0,l+1,1)}\n            y+=l\n        elif d==\"S\":\n            sc={(x+i,y+j) for i in range(1) for j in range(0,-l-1,-1)}\n            y-=l\n        elif d==\"E\":\n            sc={(x+i,y+j) for i in range(0,l+1,1) for j in range(1)}\n            x+=l\n        else:\n            sc={(x+i,y+j) for i in range(0,-l-1,-1) for j in range(1)}\n            x-=l\n        c=c|(sc&cd)\n    if c==cd:\n        print(\"Yes\")\n    else:\n        print(\"No\")",
        "submission_id": "s870751779",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 27,
        "if_count": 3,
        "elif_count": 2,
        "else_count": 2,
        "for_count": 10,
        "while_count": 1,
        "total_control_statements": 18,
        "serialized_code_tokens": "Line 1: while 1:\nLine 2:     N=int(input())\nLine 3:     if not N:break\nLine 4:     cd={tuple(map(int,input().split())) for _ in range(N)}\nLine 5:     c=set()\nLine 6:     x,y=10,10\nLine 7:     M=int(input())\nLine 8:     for _ in range(M):\nLine 9:         d,l=input().split()\nLine 10:         l=int(l)\nLine 11:         if d==\"N\":\nLine 12:             sc={(x+i,y+j) for i in range(1) for j in range(0,l+1,1)}\nLine 13:             y+=l\nLine 14:         elif d==\"S\":\nLine 15:             sc={(x+i,y+j) for i in range(1) for j in range(0,-l-1,-1)}\nLine 16:             y-=l\nLine 17:         elif d==\"E\":\nLine 18:             sc={(x+i,y+j) for i in range(0,l+1,1) for j in range(1)}\nLine 19:             x+=l\nLine 20:         else:\nLine 21:             sc={(x+i,y+j) for i in range(0,-l-1,-1) for j in range(1)}\nLine 22:             x-=l\nLine 23:         c=c|(sc&cd)\nLine 24:     if c==cd:\nLine 25:         print(\"Yes\")\nLine 26:     else:\nLine 27:         print(\"No\")",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 23, 24, 25\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 23, 24, 27\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 23, 24, 25\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 23, 24, 27\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 17, 18, 19, 23, 24, 25\n",
            "7. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 17, 18, 19, 23, 24, 27\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 17, 21, 22, 23, 24, 25\n",
            "9. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 17, 21, 22, 23, 24, 27\n",
            "10. Lines 1, 2, 3, 4, 5, 6, 7, 8, 24, 25\n",
            "11. Lines 1, 2, 3, 4, 5, 6, 7, 8, 24, 27\n",
            "12. Lines 1\n"
        ],
        "test_cases": {
            "1": "3\n1 1\n2 2\n1 3\n2\nN 2\nS 1",
            "2": "2\n1 1\n1 2\n1\nE 1",
            "3": "5\n1 1\n1 2\n1 3\n1 4\n1 5\n5\nN 3\nS 2\nE 4\nW 1\nN 5",
            "4": "4\n0 0\n0 1\n1 0\n1 1\n4\nN 1\nE 1\nS 1\nW 1",
            "5": "1\n1 1\n0",
            "6": "0"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                0,
                1,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1
            ],
            "5": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                1,
                1
            ],
            "6": [
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03339",
        "code_tokens": "n = input()\nn = input()\nnl = list(n)\nw = [0 for i in range(len(n))]\ne = [0 for i in range(len(n))]\nw[0] = 1 if nl[0] == \"W\" else 0\ne[0] = 1 if nl[0] == \"E\" else 0\nfor i in range(len(n)-1):\n    w[i+1] = w[i] + 1 if nl[i+1] == \"W\" else w[i]\n    e[i+1] = e[i] + 1 if nl[i+1] == \"E\" else e[i]\nwr = [0 for i in range(len(n))]\ner = [0 for i in range(len(n))]\nans = [0 for i in range(len(n))]\nfor i in range(len(n)):\n    wr[i] = w[len(n)-1] - w[i]\n    er[i] = e[len(n)-1] - e[i]\nfor i in range(len(n)):\n    temp = w[i] - 1 if nl[i] == \"W\" else w[i]\n    ans[i] = temp + er[i]\nprint(min(ans))",
        "submission_id": "s927414085",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 25,
        "if_count": 5,
        "elif_count": 0,
        "else_count": 5,
        "for_count": 8,
        "while_count": 0,
        "total_control_statements": 18,
        "serialized_code_tokens": "Line 1: n = input()\nLine 2: n = input()\nLine 3: nl = list(n)\nLine 4: w = [0 for i in range(len(n))]\nLine 5: e = [0 for i in range(len(n))]\nLine 6: w[0] = 1 if nl[0] == \"W\" else 0\nLine 7: e[0] = 1 if nl[0] == \"E\" else 0\nLine 8: for i in range(len(n)-1):\nLine 9:     w[i+1] = w[i] + 1 if nl[i+1] == \"W\" else w[i]\nLine 10:     e[i+1] = e[i] + 1 if nl[i+1] == \"E\" else e[i]\nLine 11: wr = [0 for i in range(len(n))]\nLine 12: er = [0 for i in range(len(n))]\nLine 13: ans = [0 for i in range(len(n))]\nLine 14: for i in range(len(n)):\nLine 15:     wr[i] = w[len(n)-1] - w[i]\nLine 16:     er[i] = e[len(n)-1] - e[i]\nLine 17: for i in range(len(n)):\nLine 18:     temp = w[i] - 1 if nl[i] == \"W\" else w[i]\nLine 19:     ans[i] = temp + er[i]\nLine 20: print(min(ans))",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 20\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 20\n",
            "7. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 17, 18, 19, 20\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 17, 20\n"
        ],
        "test_cases": {
            "1": "6\nWWEEWE",
            "2": "1\nW",
            "3": "5\nEEEEW",
            "4": "10\nWWEWEWEEWE",
            "5": "20\nWWWWWWWWWWEEEEEEEEEE",
            "6": "8\nWWEWWEWW"
        },
        "gt": {
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03112",
        "code_tokens": "from bisect import bisect_left\nINF = 2 * 10**10\nA, B, Q = map(int, input().split())\nS = [int(input()) for _ in range(A)]\nT = [int(input()) for _ in range(B)]\nX = [int(input()) for _ in range(Q)]\nans = []\nfor x in X:\n    sr = bisect_left(S, x) \n    sl = sr -1\n    if sr != len(S) and S[sr] == x:\n        sl = sr\n    tr = bisect_left(T, x)\n    tl = tr - 1\n    if tr != len(T) and T[tr] == x:\n        tl = tr\n    ll = INF if sl == -1 or tl == -1 else x - min(S[sl], T[tl])\n    rr = INF if sr == len(S) or tr == len(T) else max(S[sr], T[tr]) - x\n    lsrt = INF if sl == -1 or tr == len(T) else 2*(x-S[sl]) + (T[tr] - x)\n    ltrs = INF if tl == -1 or sr == len(S) else 2*(x-T[tl]) + (S[sr] - x)\n    rslt = INF if tl == -1 or sr == len(S) else 2*(S[sr] - x) + (x - T[tl])\n    rtls = INF if sl == -1 or tr == len(T) else 2*(T[tr] - x) + (x - S[sl])\n    ans.append(min(ll, rr, lsrt, ltrs, rslt, rtls))\nprint(*ans, sep='\\n')",
        "submission_id": "s135932146",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 28,
        "if_count": 8,
        "elif_count": 0,
        "else_count": 6,
        "for_count": 4,
        "while_count": 0,
        "total_control_statements": 18,
        "serialized_code_tokens": "Line 1: from bisect import bisect_left\nLine 2: INF = 2 * 10**10\nLine 3: A, B, Q = map(int, input().split())\nLine 4: S = [int(input()) for _ in range(A)]\nLine 5: T = [int(input()) for _ in range(B)]\nLine 6: X = [int(input()) for _ in range(Q)]\nLine 7: ans = []\nLine 8: for x in X:\nLine 9:     sr = bisect_left(S, x) \nLine 10:     sl = sr -1\nLine 11:     if sr != len(S) and S[sr] == x:\nLine 12:         sl = sr\nLine 13:     tr = bisect_left(T, x)\nLine 14:     tl = tr - 1\nLine 15:     if tr != len(T) and T[tr] == x:\nLine 16:         tl = tr\nLine 17:     ll = INF if sl == -1 or tl == -1 else x - min(S[sl], T[tl])\nLine 18:     rr = INF if sr == len(S) or tr == len(T) else max(S[sr], T[tr]) - x\nLine 19:     lsrt = INF if sl == -1 or tr == len(T) else 2*(x-S[sl]) + (T[tr] - x)\nLine 20:     ltrs = INF if tl == -1 or sr == len(S) else 2*(x-T[tl]) + (S[sr] - x)\nLine 21:     rslt = INF if tl == -1 or sr == len(S) else 2*(S[sr] - x) + (x - T[tl])\nLine 22:     rtls = INF if sl == -1 or tr == len(T) else 2*(T[tr] - x) + (x - S[sl])\nLine 23:     ans.append(min(ll, rr, lsrt, ltrs, rslt, rtls))\nLine 24: print(*ans, sep='\\n')",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 7, 8, 24\n"
        ],
        "test_cases": {
            "1": "3 3 2\n1 \n5\n9\n2   \n6\n",
            "2": "1 1 1\n10000000000 \n10000000000\n10000000000",
            "3": "5 5 3\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n",
            "4": "5 5 3\n1\n3\n5\n2\n4\n6\n"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03289",
        "code_tokens": "S = input()\nstate = \"\"\nfor i, char in enumerate(S):\n    if state == \"\":\n        if char == \"A\":\n            state = \"A\"\n        else:\n            state = \"WA\"\n    elif state == \"A\":\n        if char == \"C\" and i < 2: \n            state = \"WA\"\n        elif char == \"C\":\n            state = \"C\"\n        elif char.isupper():\n            state = \"WA\"\n        else:\n            continue\n    elif state == \"C\":\n        if char == \"C\":\n            state = \"WA\"\n        elif char.isupper():\n            state = \"WA\"\n        else:\n            state = \"AC\"\n    else:\n        if char.isupper():\n            state = \"WA\"\nelse:\n    if state == \"AC\":\n        print(\"AC\")\n    else:\n        print(\"WA\")",
        "submission_id": "s968713428",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 26,
        "if_count": 6,
        "elif_count": 5,
        "else_count": 6,
        "for_count": 1,
        "while_count": 0,
        "total_control_statements": 18,
        "serialized_code_tokens": "Line 1: S = input()\nLine 2: state = \"\"\nLine 3: for i, char in enumerate(S):\nLine 4:     if state == \"\":\nLine 5:         if char == \"A\":\nLine 6:             state = \"A\"\nLine 7:         else:\nLine 8:             state = \"WA\"\nLine 9:     elif state == \"A\":\nLine 10:         if char == \"C\" and i < 2: \nLine 11:             state = \"WA\"\nLine 12:         elif char == \"C\":\nLine 13:             state = \"C\"\nLine 14:         elif char.isupper():\nLine 15:             state = \"WA\"\nLine 16:         else:\nLine 17:             continue\nLine 18:     elif state == \"C\":\nLine 19:         if char == \"C\":\nLine 20:             state = \"WA\"\nLine 21:         elif char.isupper():\nLine 22:             state = \"WA\"\nLine 23:         else:\nLine 24:             state = \"AC\"\nLine 25:     else:\nLine 26:         if char.isupper():\nLine 27:             state = \"WA\"\nLine 28: else:\nLine 29:     if state == \"AC\":\nLine 30:         print(\"AC\")\nLine 31:     else:\nLine 32:         print(\"WA\")",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 29, 30\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 29, 32\n",
            "3. Lines 1, 2, 3, 4, 5, 8, 29, 30\n",
            "4. Lines 1, 2, 3, 4, 5, 8, 29, 32\n",
            "5. Lines 1, 2, 3, 4, 9, 10, 11, 29, 30\n",
            "6. Lines 1, 2, 3, 4, 9, 10, 11, 29, 32\n",
            "7. Lines 1, 2, 3, 4, 9, 10, 12, 13, 29, 30\n",
            "8. Lines 1, 2, 3, 4, 9, 10, 12, 13, 29, 32\n",
            "9. Lines 1, 2, 3, 4, 9, 10, 12, 14, 15, 29, 30\n",
            "10. Lines 1, 2, 3, 4, 9, 10, 12, 14, 15, 29, 32\n",
            "11. Lines 1, 2, 3, 4, 9, 10, 12, 14, 29, 30\n",
            "12. Lines 1, 2, 3, 4, 9, 10, 12, 14, 29, 32\n",
            "13. Lines 1, 2, 3, 4, 9, 18, 19, 20, 29, 30\n",
            "14. Lines 1, 2, 3, 4, 9, 18, 19, 20, 29, 32\n",
            "15. Lines 1, 2, 3, 4, 9, 18, 19, 21, 22, 29, 30\n",
            "16. Lines 1, 2, 3, 4, 9, 18, 19, 21, 22, 29, 32\n",
            "17. Lines 1, 2, 3, 4, 9, 18, 19, 21, 24, 29, 30\n",
            "18. Lines 1, 2, 3, 4, 9, 18, 19, 21, 24, 29, 32\n",
            "19. Lines 1, 2, 3, 4, 9, 18, 26, 27, 29, 30\n",
            "20. Lines 1, 2, 3, 4, 9, 18, 26, 27, 29, 32\n",
            "21. Lines 1, 2, 3, 4, 9, 18, 26, 29, 30\n",
            "22. Lines 1, 2, 3, 4, 9, 18, 26, 29, 32\n",
            "23. Lines 1, 2, 3, 29, 30\n",
            "24. Lines 1, 2, 3, 29, 32\n"
        ],
        "test_cases": {
            "1": "\n",
            "2": "BC",
            "3": "ACC",
            "4": "ABCC",
            "5": "ACCC",
            "6": "ACCX",
            "7": "ACc",
            "8": "ACCacc"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1
            ],
            "5": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1
            ],
            "6": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1
            ],
            "7": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                1,
                0,
                1,
                1
            ],
            "8": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p02926",
        "code_tokens": "import math\nN=int(input())\nengines = tuple((complex(*map(int, input().split())) for _ in range(N)))\nengines = sorted(list((engine, math.atan2(engine.imag, engine.real))for engine in engines if engine != 0), key=lambda x:x[1])\nN=len(engines)\nif N == 0:\n    print(0)\nelse:\n    total = sum(engine[0] for engine in engines)\n    head_index = max(i if engines[i][0].imag < 0 else -1 for i in range(N))\n    tail_index = 0\n    tmp = sum(engines[i][0] for i in range(tail_index,head_index+1))\n    maximum = max(abs(tmp), abs(total - tmp))\n    while True:\n        if head_index < N-1:\n            if (engines[head_index+1][0]/engines[tail_index][0]).imag >= 0:\n                head_index += 1\n            else:\n                tail_index += 1\n        else:\n            if (engines[0][0]/engines[tail_index][0]).imag < 0:\n                tail_index += 1\n            else:\n                break\n        tmp = sum(engines[i][0] for i in range(tail_index,head_index+1))\n        maximum = max(maximum, abs(tmp), abs(total - tmp))\n    print(maximum)",
        "submission_id": "s165834271",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 29,
        "if_count": 6,
        "elif_count": 0,
        "else_count": 5,
        "for_count": 6,
        "while_count": 1,
        "total_control_statements": 18,
        "serialized_code_tokens": "Line 1: import math\nLine 2: N=int(input())\nLine 3: engines = tuple((complex(*map(int, input().split())) for _ in range(N)))\nLine 4: engines = sorted(list((engine, math.atan2(engine.imag, engine.real))for engine in engines if engine != 0), key=lambda x:x[1])\nLine 5: N=len(engines)\nLine 6: if N == 0:\nLine 7:     print(0)\nLine 8: else:\nLine 9:     total = sum(engine[0] for engine in engines)\nLine 10:     head_index = max(i if engines[i][0].imag < 0 else -1 for i in range(N))\nLine 11:     tail_index = 0\nLine 12:     tmp = sum(engines[i][0] for i in range(tail_index,head_index+1))\nLine 13:     maximum = max(abs(tmp), abs(total - tmp))\nLine 14:     while True:\nLine 15:         if head_index < N-1:\nLine 16:             if (engines[head_index+1][0]/engines[tail_index][0]).imag >= 0:\nLine 17:                 head_index += 1\nLine 18:             else:\nLine 19:                 tail_index += 1\nLine 20:         else:\nLine 21:             if (engines[0][0]/engines[tail_index][0]).imag < 0:\nLine 22:                 tail_index += 1\nLine 23:             else:\nLine 24:                 break\nLine 25:         tmp = sum(engines[i][0] for i in range(tail_index,head_index+1))\nLine 26:         maximum = max(maximum, abs(tmp), abs(total - tmp))\nLine 27:     print(maximum)",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 6, 7\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 25, 26, 27\n",
            "3. Lines 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 25, 26, 27\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 19, 21, 25, 26, 27\n",
            "5. Lines 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 19, 25, 26, 27\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 21, 22, 25, 26, 27\n",
            "7. Lines 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 21, 27\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 27\n"
        ],
        "test_cases": {
            "1": "0",
            "2": "3\n0 0\n0 0\n0 0",
            "3": "1\n1 1",
            "4": "5\n1 1\n-1 -1\n2 -3\n-4 2\n0 0",
            "5": "4\n1 1\n-1 -1\n2 -3\n-4 2",
            "6": "3\n1 1\n-1 1\n-1 -1"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "5": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "6": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03674",
        "code_tokens": "n = int(input())\na = tuple(map(int, input().split()))\noccur = [0 for i in range(n + 1)]\nMOD = 1000000007\nfor i in range(n + 1):\n    if occur[a[i]] > 0: val = n - 1 - i + occur[a[i]]\n    else: occur[a[i]] = i + 1\ninv = [0 if i > 2 else 1 for i in range(n + 2)]\npinv = [0 if i > 2 else 1 for i in range(n + 2)]\nperm = [0 if i > 2 else 1 for i in range(n + 2)]\nfor i in range(2, n + 2):\n    inv[i] = -int(MOD / i) * inv[MOD % i] + MOD\n    pinv[i] = pinv[i - 1] * inv[i] % MOD\n    perm[i] = perm[i - 1] * i % MOD\ndef C(n, m):\n    return (perm[m] * pinv[n] % MOD) * pinv[m - n] % MOD if n <= m else 0\nfor i in range(1, n + 2):\n    temp = C(i, n + 1) - C(i - 1, val)\n    if temp < 0: temp += MOD\n    print(temp)",
        "submission_id": "s480075061",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 20,
        "if_count": 6,
        "elif_count": 0,
        "else_count": 5,
        "for_count": 7,
        "while_count": 0,
        "total_control_statements": 18,
        "serialized_code_tokens": "Line 1: n = int(input())\nLine 2: a = tuple(map(int, input().split()))\nLine 3: occur = [0 for i in range(n + 1)]\nLine 4: MOD = 1000000007\nLine 5: for i in range(n + 1):\nLine 6:     if occur[a[i]] > 0: val = n - 1 - i + occur[a[i]]\nLine 7:     else: occur[a[i]] = i + 1\nLine 8: inv = [0 if i > 2 else 1 for i in range(n + 2)]\nLine 9: pinv = [0 if i > 2 else 1 for i in range(n + 2)]\nLine 10: perm = [0 if i > 2 else 1 for i in range(n + 2)]\nLine 11: for i in range(2, n + 2):\nLine 12:     inv[i] = -int(MOD / i) * inv[MOD % i] + MOD\nLine 13:     pinv[i] = pinv[i - 1] * inv[i] % MOD\nLine 14:     perm[i] = perm[i - 1] * i % MOD\nLine 15: def C(n, m):\nLine 16:     return (perm[m] * pinv[n] % MOD) * pinv[m - n] % MOD if n <= m else 0\nLine 17: for i in range(1, n + 2):\nLine 18:     temp = C(i, n + 1) - C(i - 1, val)\nLine 19:     if temp < 0: temp += MOD\nLine 20:     print(temp)",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 8, 9, 10, 11, 15, 17\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 15, 17\n",
            "3. Lines 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 15, 17\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 17\n",
            "5. Lines 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 17\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17\n",
            "7. Lines 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17\n",
            "9. Lines 1, 2, 3, 4, 5, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20\n",
            "10. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20\n",
            "11. Lines 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20\n",
            "12. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20\n",
            "13. Lines 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20\n",
            "14. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20\n",
            "15. Lines 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20\n",
            "16. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20\n"
        ],
        "test_cases": {
            "1": "0\n",
            "2": "1\n5",
            "3": "5\n1 2 3 2 1",
            "4": "5\n1 2 3 4 5"
        },
        "gt": {
            "1": [
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03676",
        "code_tokens": "n = int(input())\na = list(map(int, input().split()))\noccur = [0 for i in range(n + 1)]\nMOD = 1000000007\nfor i in range(n + 1):\n    if occur[a[i]] > 0: val = n - 1 - i + occur[a[i]]\n    else: occur[a[i]] = i + 1\ninv = [0 if i > 2 else 1 for i in range(n + 2)]\npinv = [0 if i > 2 else 1 for i in range(n + 2)]\nperm = [0 if i > 2 else 1 for i in range(n + 2)]\nfor i in range(2, n + 2):\n    inv[i] = -int(MOD / i) * inv[MOD % i] + MOD\n    pinv[i] = pinv[i - 1] * inv[i] % MOD\n    perm[i] = perm[i - 1] * i % MOD\ndef C(n, m):\n    return (perm[m] * pinv[n] % MOD) * pinv[m - n] % MOD if n <= m else 0\nfor i in range(1, n + 2):\n    temp = C(i, n + 1) - C(i - 1, val)\n    if temp < 0: temp += MOD\n    print(temp)",
        "submission_id": "s208168923",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 20,
        "if_count": 6,
        "elif_count": 0,
        "else_count": 5,
        "for_count": 7,
        "while_count": 0,
        "total_control_statements": 18,
        "serialized_code_tokens": "Line 1: n = int(input())\nLine 2: a = list(map(int, input().split()))\nLine 3: occur = [0 for i in range(n + 1)]\nLine 4: MOD = 1000000007\nLine 5: for i in range(n + 1):\nLine 6:     if occur[a[i]] > 0: val = n - 1 - i + occur[a[i]]\nLine 7:     else: occur[a[i]] = i + 1\nLine 8: inv = [0 if i > 2 else 1 for i in range(n + 2)]\nLine 9: pinv = [0 if i > 2 else 1 for i in range(n + 2)]\nLine 10: perm = [0 if i > 2 else 1 for i in range(n + 2)]\nLine 11: for i in range(2, n + 2):\nLine 12:     inv[i] = -int(MOD / i) * inv[MOD % i] + MOD\nLine 13:     pinv[i] = pinv[i - 1] * inv[i] % MOD\nLine 14:     perm[i] = perm[i - 1] * i % MOD\nLine 15: def C(n, m):\nLine 16:     return (perm[m] * pinv[n] % MOD) * pinv[m - n] % MOD if n <= m else 0\nLine 17: for i in range(1, n + 2):\nLine 18:     temp = C(i, n + 1) - C(i - 1, val)\nLine 19:     if temp < 0: temp += MOD\nLine 20:     print(temp)",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5, 8, 9, 10, 11, 15, 17\n",
            "2. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 15, 17\n",
            "3. Lines 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 15, 17\n",
            "4. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 17\n",
            "5. Lines 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 17\n",
            "6. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17\n",
            "7. Lines 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17\n",
            "8. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17\n",
            "9. Lines 1, 2, 3, 4, 5, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20\n",
            "10. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20\n",
            "11. Lines 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20\n",
            "12. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20\n",
            "13. Lines 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20\n",
            "14. Lines 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20\n",
            "15. Lines 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20\n",
            "16. Lines 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20\n"
        ],
        "test_cases": {
            "1": "0\n",
            "2": "1\n5",
            "3": "5\n1 2 3 2 1",
            "4": "5\n1 2 3 4 5",
            "5": "5\n1 1 1 1 1",
            "6": "5\n5 4 3 2 1",
            "7": "3\n3 2 3",
            "8": "4\n1 2 3 4"
        },
        "gt": {
            "1": [
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "4": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "5": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "6": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "7": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "8": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p02961",
        "code_tokens": "import sys\nsys.setrecursionlimit(300000)\ndef solve(x,y,k):\n    if x==y==0: return []\n    if x<0: return [(-x,y) for x,y in solve(-x,y,k)]\n    if y<0: return [(x,-y) for x,y in solve(x,-y,k)]\n    if x>y: return [(x,y) for y,x in solve(y,x,k)]\n    if (x+y)%k==0: return [(k,0)]*(x//k)+[(0,k)]*(y//k)+([]if x%k==y%k==0 else[(x%k,y%k)])\n    if x+y>=2*k:\n        if x%k+y%k>=k: return [(k,0)]*(x//k)+[(0,k)]*(y//k)+solve(x%k,y%k,k)\n        else: return ([(k,0)]*(x//k)+[(0,k)]*(y//k))[:-1]+solve(x%k,y%k+k,k)\n    if x+y<K and (x+y)%2==1: return solve(x,y+k,k)+[(0,-k)]\n    if K&1 and x+y>k and (x+y)%k%2==0: return solve(x,y-k,k)+[(0,k)]\n    z=(x+y)//2\n    return [(k-z+x,z-x),(z-k,z)]\nK,X,Y=map(int, open(0).read().split())\nif K%2==0 and (X+Y)%2==1:\n    print(-1)\nelse:\n    ans=solve(X,Y,K)\n    print(len(ans))\n    ax,ay=0,0\n    for x,y in ans:\n        ax+=x\n        ay+=y\n        print(ax,ay)",
        "submission_id": "s030028216",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 26,
        "if_count": 11,
        "elif_count": 0,
        "else_count": 3,
        "for_count": 4,
        "while_count": 0,
        "total_control_statements": 18,
        "serialized_code_tokens": "Line 1: import sys\nLine 2: sys.setrecursionlimit(300000)\nLine 3: def solve(x,y,k):\nLine 4:     if x==y==0: return []\nLine 5:     if x<0: return [(-x,y) for x,y in solve(-x,y,k)]\nLine 6:     if y<0: return [(x,-y) for x,y in solve(x,-y,k)]\nLine 7:     if x>y: return [(x,y) for y,x in solve(y,x,k)]\nLine 8:     if (x+y)%k==0: return [(k,0)]*(x//k)+[(0,k)]*(y//k)+([]if x%k==y%k==0 else[(x%k,y%k)])\nLine 9:     if x+y>=2*k:\nLine 10:         if x%k+y%k>=k: return [(k,0)]*(x//k)+[(0,k)]*(y//k)+solve(x%k,y%k,k)\nLine 11:         else: return ([(k,0)]*(x//k)+[(0,k)]*(y//k))[:-1]+solve(x%k,y%k+k,k)\nLine 12:     if x+y<K and (x+y)%2==1: return solve(x,y+k,k)+[(0,-k)]\nLine 13:     if K&1 and x+y>k and (x+y)%k%2==0: return solve(x,y-k,k)+[(0,k)]\nLine 14:     z=(x+y)//2\nLine 15:     return [(k-z+x,z-x),(z-k,z)]\nLine 16: K,X,Y=map(int, open(0).read().split())\nLine 17: if K%2==0 and (X+Y)%2==1:\nLine 18:     print(-1)\nLine 19: else:\nLine 20:     ans=solve(X,Y,K)\nLine 21:     print(len(ans))\nLine 22:     ax,ay=0,0\nLine 23:     for x,y in ans:\nLine 24:         ax+=x\nLine 25:         ay+=y\nLine 26:         print(ax,ay)",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 16, 17, 18\n",
            "2. Lines 1, 2, 3, 4, 5, 16, 17, 20\n",
            "3. Lines 1, 2, 3, 4, 16, 17, 20\n"
        ],
        "test_cases": {
            "1": "2 1 1",
            "2": "3 2 3",
            "3": "4 4 4",
            "6": "5 5 5"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "2": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "3": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "6": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p02386",
        "code_tokens": "p = [(-1, 2, 4, 1, 3, -1), (3, -1, 0, 5, -1, 2), (1, 5, -1, -1, 0, 4),\n(4, 0, -1, -1, 5, 1), (2, -1, 5, 0, -1, 3), (-1, 3, 1, 4, 2, -1)]\ndef is_equal(d, a):\n  ts = [i for i, x in enumerate(d) if x == a[0]]\n  fs = [i for i, x in enumerate(d) if x == a[1]]\n  b = 0\n  for t in ts:\n    for f in fs:\n      if t == f: continue\n      r = p[t][f]\n      if r == -1: continue\n      l = [d[t], d[f], d[r], d[5-r], d[5-f], d[5-t]]\n      if a == l: b += 1; break\n  return 1 if b > 0 else 0\nl = []\nb = 0\nfor _ in range(int(input())):\n  l += [input().split()]\nfor i in range(0, len(l)):\n  for j in range(i+1, len(l)):\n    b += is_equal(l[i], l[j])\n    if b > 0: break\nprint(\"No\") if b > 0 else print(\"Yes\")",
        "submission_id": "s720201434",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 25,
        "if_count": 8,
        "elif_count": 0,
        "else_count": 2,
        "for_count": 7,
        "while_count": 0,
        "total_control_statements": 17,
        "serialized_code_tokens": "Line 1: p = [(-1, 2, 4, 1, 3, -1), (3, -1, 0, 5, -1, 2), (1, 5, -1, -1, 0, 4),\nLine 2: (4, 0, -1, -1, 5, 1), (2, -1, 5, 0, -1, 3), (-1, 3, 1, 4, 2, -1)]\nLine 3: def is_equal(d, a):\nLine 4:   ts = [i for i, x in enumerate(d) if x == a[0]]\nLine 5:   fs = [i for i, x in enumerate(d) if x == a[1]]\nLine 6:   b = 0\nLine 7:   for t in ts:\nLine 8:     for f in fs:\nLine 9:       if t == f: continue\nLine 10:       r = p[t][f]\nLine 11:       if r == -1: continue\nLine 12:       l = [d[t], d[f], d[r], d[5-r], d[5-f], d[5-t]]\nLine 13:       if a == l: b += 1; break\nLine 14:   return 1 if b > 0 else 0\nLine 15: l = []\nLine 16: b = 0\nLine 17: for _ in range(int(input())):\nLine 18:   l += [input().split()]\nLine 19: for i in range(0, len(l)):\nLine 20:   for j in range(i+1, len(l)):\nLine 21:     b += is_equal(l[i], l[j])\nLine 22:     if b > 0: break\nLine 23: print(\"No\") if b > 0 else print(\"Yes\")",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 3, 15, 16, 17, 18, 19, 20, 23\n",
            "2. Lines 1, 3, 4, 5, 6, 7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23\n",
            "3. Lines 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23\n",
            "4. Lines 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23\n",
            "5. Lines 1, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23\n",
            "6. Lines 1, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23\n",
            "7. Lines 1, 3, 15, 16, 17, 18, 19, 23\n",
            "8. Lines 1, 3, 15, 16, 17, 19, 20, 23\n",
            "9. Lines 1, 3, 4, 5, 6, 7, 14, 15, 16, 17, 19, 20, 21, 22, 23\n",
            "10. Lines 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23\n",
            "11. Lines 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 19, 20, 21, 22, 23\n",
            "12. Lines 1, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 17, 19, 20, 21, 22, 23\n",
            "13. Lines 1, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 19, 20, 21, 22, 23\n",
            "14. Lines 1, 3, 15, 16, 17, 19, 23\n"
        ],
        "test_cases": {
            "1": "1\n1 2 3 4 5 6",
            "2": "2\n1 2 3 4 5 6\n1 2 3 4 5 6",
            "3": "2\n1 2 3 4 5 6\n1 3 2 5 4 6",
            "4": "3\n1 2 3 4 5 6\n2 3 4 5 6 1\n3 4 5 6 1 2",
            "5": "3\n1 2 3 4 5 6\n1 2 3 4 5 6\n3 4 5 6 1 2",
            "6": "4\n1 2 3 4 5 6\n2 3 4 5 6 1\n3 4 5 6 1 2\n4 5 6 1 2 3",
            "7": "4\n1 2 3 4 5 6\n1 2 3 4 5 6\n3 4 5 6 1 2\n4 5 6 1 2 3",
            "8": "5\n1 2 3 4 5 6\n2 3 4 5 6 1\n3 4 5 6 1 2\n4 5 6 1 2 3\n5 6 1 2 3 4",
            "9": "5\n1 2 3 4 5 6\n2 3 4 5 6 1\n3 4 5 6 1 2\n1 2 3 4 5 6\n5 6 1 2 3 4"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1
            ]
        }
    },
    {
        "source": "source",
        "lang": "python",
        "problem_id": "p03838",
        "code_tokens": "x, y = map(int, input().split())\nif abs(x) < abs(y) :\n    if x >= 0 :\n        if y >= 0 :\n            print(- x + y)\n        else :\n            print(- x - y + 1)\n    else :\n        if y >= 0 :\n            print(x + y + 1)\n        else :\n            print(x - y + 2)\nelif abs(x) == abs(y) :\n    if x * y < 0 :\n        print(1)\n    else :\n        print(0)\nelse :\n    if x > 0 :\n        if y > 0 :\n            print(x - y + 2)\n        else :\n            print(x + y + 1)\n    else :\n        if y > 0 :\n            print(- x - y + 1)\n        else :\n            print(- x + y)",
        "submission_id": "s334058082",
        "functions_standalone": [],
        "functions_class": [],
        "verdict": "Accepted",
        "lines_of_code": 29,
        "if_count": 8,
        "elif_count": 1,
        "else_count": 8,
        "for_count": 0,
        "while_count": 0,
        "total_control_statements": 17,
        "serialized_code_tokens": "Line 1: x, y = map(int, input().split())\nLine 2: if abs(x) < abs(y) :\nLine 3:     if x >= 0 :\nLine 4:         if y >= 0 :\nLine 5:             print(- x + y)\nLine 6:         else :\nLine 7:             print(- x - y + 1)\nLine 8:     else :\nLine 9:         if y >= 0 :\nLine 10:             print(x + y + 1)\nLine 11:         else :\nLine 12:             print(x - y + 2)\nLine 13: elif abs(x) == abs(y) :\nLine 14:     if x * y < 0 :\nLine 15:         print(1)\nLine 16:     else :\nLine 17:         print(0)\nLine 18: else :\nLine 19:     if x > 0 :\nLine 20:         if y > 0 :\nLine 21:             print(x - y + 2)\nLine 22:         else :\nLine 23:             print(x + y + 1)\nLine 24:     else :\nLine 25:         if y > 0 :\nLine 26:             print(- x - y + 1)\nLine 27:         else :\nLine 28:             print(- x + y)",
        "coverage_options": [
            "Set 1: Error",
            "1. Lines 1, 2, 3, 4, 5\n",
            "2. Lines 1, 2, 3, 4, 7\n",
            "3. Lines 1, 2, 3, 9, 10\n",
            "4. Lines 1, 2, 3, 9, 12\n",
            "5. Lines 1, 2, 13, 14, 15\n",
            "6. Lines 1, 2, 13, 14, 17\n",
            "7. Lines 1, 2, 13, 19, 20, 21\n",
            "8. Lines 1, 2, 13, 19, 20, 23\n",
            "9. Lines 1, 2, 13, 19, 25, 26\n",
            "10. Lines 1, 2, 13, 19, 25, 28\n"
        ],
        "test_cases": {
            "1": "3 5",
            "2": "-3 5",
            "3": "3 -5",
            "4": "-3 -5",
            "5": "5 5",
            "6": "-5 5",
            "7": "5 -5",
            "8": "-5 -5",
            "9": "5 3",
            "10": "-5 3",
            "11": "5 -3",
            "12": "-5 -3"
        },
        "gt": {
            "1": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2": [
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "3": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "4": [
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "5": [
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "6": [
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "7": [
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "8": [
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "9": [
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "10": [
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ],
            "11": [
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                0
            ],
            "12": [
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                1
            ]
        }
    }
]
